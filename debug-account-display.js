// Debug script ƒë·ªÉ test logic hi·ªÉn th·ªã t√†i kho·∫£n m·ªõi
// Ch·∫°y script n√†y trong Console c·ªßa Developer Tools

console.log('üîç Account Display Logic Test Script');
console.log('===================================');

// Function ƒë·ªÉ test logic hi·ªÉn th·ªã t√†i kho·∫£n
function testAccountDisplay() {
  try {
    console.log('üß™ Testing account display logic...');
    
    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü trang Settings kh√¥ng
    if (!window.settingsComponent) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y Settings component! Vui l√≤ng v√†o trang Settings tr∆∞·ªõc.');
      return;
    }
    
    const users = window.settingsComponent.firebaseUsers || [];
    console.log(`üìä T·ªïng s·ªë t√†i kho·∫£n: ${users.length}`);
    
    // Test c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    users.forEach((user, index) => {
      const display = window.settingsComponent.getAccountDisplay(user);
      const typeLabel = window.settingsComponent.getAccountTypeLabel(user);
      const typeIcon = window.settingsComponent.getAccountTypeIcon(user);
      
      console.log(`\nüë§ User ${index + 1}:`);
      console.log(`   - Email: ${user.email}`);
      console.log(`   - Display Name: ${user.displayName || 'N/A'}`);
      console.log(`   - Employee ID: ${user.employeeId || 'N/A'}`);
      console.log(`   - Display: ${display}`);
      console.log(`   - Type: ${typeLabel} ${typeIcon}`);
      
      // Ki·ªÉm tra logic ƒë·∫∑c bi·ªát cho email asp
      if (user.email && user.email.toLowerCase().startsWith('asp')) {
        const email = user.email.toLowerCase();
        const match = email.match(/^asp(\d{4})@/);
        if (match) {
          console.log(`   ‚úÖ Email ASP detected: ${match[1]} -> ASP${match[1]}`);
        } else {
          console.log(`   ‚ö†Ô∏è Email ASP kh√¥ng ƒë√∫ng format: ${user.email}`);
        }
      }
    });
    
    console.log('\n‚úÖ Test ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi test:', error);
  }
}

// Function ƒë·ªÉ t√¨m t√†i kho·∫£n c·ª• th·ªÉ
function findSpecificAccount(searchTerm) {
  try {
    console.log(`üîç T√¨m ki·∫øm t√†i kho·∫£n: ${searchTerm}`);
    
    if (!window.settingsComponent) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y Settings component!');
      return;
    }
    
    const users = window.settingsComponent.firebaseUsers || [];
    const foundUsers = users.filter(user => 
      user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.employeeId?.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    if (foundUsers.length > 0) {
      console.log(`‚úÖ T√¨m th·∫•y ${foundUsers.length} t√†i kho·∫£n:`);
      foundUsers.forEach((user, index) => {
        const display = window.settingsComponent.getAccountDisplay(user);
        const typeLabel = window.settingsComponent.getAccountTypeLabel(user);
        const typeIcon = window.settingsComponent.getAccountTypeIcon(user);
        
        console.log(`\n   ${index + 1}. ${display}`);
        console.log(`      - Email: ${user.email}`);
        console.log(`      - Display Name: ${user.displayName || 'N/A'}`);
        console.log(`      - Employee ID: ${user.employeeId || 'N/A'}`);
        console.log(`      - Type: ${typeLabel} ${typeIcon}`);
      });
    } else {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†o ch·ª©a: ${searchTerm}`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi t√¨m ki·∫øm:', error);
  }
}

// Function ƒë·ªÉ test logic v·ªõi d·ªØ li·ªáu m·∫´u
function testWithSampleData() {
  try {
    console.log('üß™ Testing with sample data...');
    
    if (!window.settingsComponent) {
      console.error('‚ùå Kh√¥ng t√¨m th·∫•y Settings component!');
      return;
    }
    
    // T·∫°o d·ªØ li·ªáu m·∫´u
    const sampleUsers = [
      { email: 'asp2197@asp.com', displayName: 'Nguy·ªÖn VƒÉn A', employeeId: null },
      { email: 'asp1234@asp.com', displayName: 'Tr·∫ßn Th·ªã B', employeeId: null },
      { email: 'user@example.com', displayName: 'User C', employeeId: null },
      { email: 'admin@company.com', displayName: 'Admin D', employeeId: 'ADM001' }
    ];
    
    sampleUsers.forEach((user, index) => {
      console.log(`\nüìù Sample User ${index + 1}:`);
      console.log(`   - Email: ${user.email}`);
      console.log(`   - Display Name: ${user.displayName}`);
      console.log(`   - Employee ID: ${user.employeeId || 'N/A'}`);
      
      // Test logic hi·ªÉn th·ªã
      const display = window.settingsComponent.getAccountDisplay(user);
      const typeLabel = window.settingsComponent.getAccountTypeLabel(user);
      const typeIcon = window.settingsComponent.getAccountTypeIcon(user);
      
      console.log(`   - Display: ${display}`);
      console.log(`   - Type: ${typeLabel} ${typeIcon}`);
    });
    
    console.log('\n‚úÖ Sample data test ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi test sample data:', error);
  }
}

// Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
console.log('üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:');
console.log('1. testAccountDisplay() - Test logic hi·ªÉn th·ªã t·∫•t c·∫£ t√†i kho·∫£n');
console.log('2. findSpecificAccount("search_term") - T√¨m t√†i kho·∫£n c·ª• th·ªÉ');
console.log('3. testWithSampleData() - Test v·ªõi d·ªØ li·ªáu m·∫´u');
console.log('');
console.log('üí° V√≠ d·ª•: findSpecificAccount("asp2197")');
console.log('‚ö†Ô∏è L∆∞u √Ω: Vui l√≤ng v√†o trang Settings tr∆∞·ªõc khi ch·∫°y c√°c l·ªánh n√†y!');
console.log('');

// Export functions ƒë·ªÉ s·ª≠ d·ª•ng
window.testAccountDisplay = testAccountDisplay;
window.findSpecificAccount = findSpecificAccount;
window.testWithSampleData = testWithSampleData;
