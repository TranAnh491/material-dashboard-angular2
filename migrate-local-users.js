// Script migrate d·ªØ li·ªáu Local Users
// Ch·∫°y trong browser console

console.log('üöÄ B·∫Øt ƒë·∫ßu migrate Local Users data...');

// 1. Ki·ªÉm tra d·ªØ li·ªáu c≈© trong user-permissions
async function checkOldData() {
  try {
    console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu c≈© trong user-permissions...');
    
    const snapshot = await firebase.firestore()
      .collection('user-permissions')
      .where('employeeId', '!=', null) // L·ªçc d·ªØ li·ªáu c√≥ employeeId (local users)
      .get();
    
    console.log(`üìä T√¨m th·∫•y ${snapshot.size} local users trong user-permissions`);
    
    const localUsers = [];
    snapshot.forEach(doc => {
      const data = doc.data();
      if (data.employeeId) { // Ch·ªâ l·∫•y local users
        localUsers.push({
          id: doc.id,
          ...data
        });
        console.log(`üë§ Local User: ${data.employeeId}`);
      }
    });
    
    return localUsers;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu c≈©:', error);
    return [];
  }
}

// 2. Migrate d·ªØ li·ªáu sang local-user-permissions
async function migrateLocalUsers(localUsers) {
  if (localUsers.length === 0) {
    console.log('üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu local users ƒë·ªÉ migrate');
    return;
  }
  
  try {
    console.log(`üîÑ Migrate ${localUsers.length} local users...`);
    
    const batch = firebase.firestore().batch();
    
    for (const user of localUsers) {
      // T·∫°o document m·ªõi trong local-user-permissions
      const newDocRef = firebase.firestore()
        .collection('local-user-permissions')
        .doc();
      
      const userData = {
        employeeId: user.employeeId,
        password: user.password,
        hasDeletePermission: user.hasDeletePermission || false,
        createdAt: user.createdAt || new Date(),
        updatedAt: user.updatedAt || new Date()
      };
      
      batch.set(newDocRef, userData);
      console.log(`üìù S·∫Ω migrate: ${user.employeeId}`);
    }
    
    await batch.commit();
    console.log('‚úÖ Migrate th√†nh c√¥ng!');
    
    return localUsers.length;
  } catch (error) {
    console.error('‚ùå L·ªói khi migrate:', error);
    return 0;
  }
}

// 3. Ki·ªÉm tra d·ªØ li·ªáu m·ªõi
async function checkNewData() {
  try {
    console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu m·ªõi trong local-user-permissions...');
    
    const snapshot = await firebase.firestore()
      .collection('local-user-permissions')
      .get();
    
    console.log(`üìä Collection local-user-permissions c√≥ ${snapshot.size} documents`);
    
    snapshot.forEach(doc => {
      const data = doc.data();
      console.log(`‚úÖ ${data.employeeId} - Quy·ªÅn x√≥a: ${data.hasDeletePermission}`);
    });
    
    return snapshot.size;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu m·ªõi:', error);
    return 0;
  }
}

// 4. X√≥a d·ªØ li·ªáu c≈© (ch·ªâ local users)
async function cleanupOldData(localUsers) {
  if (localUsers.length === 0) {
    console.log('üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu c≈© ƒë·ªÉ x√≥a');
    return;
  }
  
  try {
    console.log(`üóëÔ∏è X√≥a ${localUsers.length} local users t·ª´ user-permissions...`);
    
    const batch = firebase.firestore().batch();
    
    for (const user of localUsers) {
      const docRef = firebase.firestore()
        .collection('user-permissions')
        .doc(user.id);
      
      batch.delete(docRef);
      console.log(`üóëÔ∏è S·∫Ω x√≥a: ${user.employeeId} (${user.id})`);
    }
    
    await batch.commit();
    console.log('‚úÖ Cleanup th√†nh c√¥ng!');
  } catch (error) {
    console.error('‚ùå L·ªói khi cleanup:', error);
  }
}

// 5. T·∫°o test data n·∫øu kh√¥ng c√≥
async function createTestLocalUsers() {
  try {
    console.log('üß™ T·∫°o test local users...');
    
    const testUsers = [
      {
        employeeId: 'EMP001',
        password: 'password123',
        hasDeletePermission: true
      },
      {
        employeeId: 'EMP002', 
        password: 'password456',
        hasDeletePermission: false
      },
      {
        employeeId: 'Admin',
        password: 'Admin',
        hasDeletePermission: true
      }
    ];
    
    const batch = firebase.firestore().batch();
    
    for (const user of testUsers) {
      const docRef = firebase.firestore()
        .collection('local-user-permissions')
        .doc();
      
      batch.set(docRef, {
        ...user,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      
      console.log(`üìù T·∫°o test user: ${user.employeeId}`);
    }
    
    await batch.commit();
    console.log('‚úÖ T·∫°o test data th√†nh c√¥ng!');
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o test data:', error);
  }
}

// 6. Main function
async function migrateLocalUsersData() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu migrate Local Users data...\n');
  
  // Ki·ªÉm tra Firebase connection
  if (typeof firebase === 'undefined') {
    console.error('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c load!');
    return;
  }
  
  // Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p
  const currentUser = firebase.auth().currentUser;
  if (!currentUser) {
    console.error('‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi migrate!');
    return;
  }
  
  try {
    // B∆∞·ªõc 1: Ki·ªÉm tra d·ªØ li·ªáu c≈©
    const localUsers = await checkOldData();
    
    // B∆∞·ªõc 2: Migrate d·ªØ li·ªáu
    if (localUsers.length > 0) {
      await migrateLocalUsers(localUsers);
      
      // B∆∞·ªõc 3: Ki·ªÉm tra d·ªØ li·ªáu m·ªõi
      await checkNewData();
      
      // B∆∞·ªõc 4: X√≥a d·ªØ li·ªáu c≈© (optional - ch·ªâ ch·∫°y khi ch·∫Øc ch·∫Øn)
      // await cleanupOldData(localUsers);
    } else {
      console.log('üì≠ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu local users c≈©');
      
      // T·∫°o test data
      const newDataCount = await checkNewData();
      if (newDataCount === 0) {
        console.log('üß™ T·∫°o test local users...');
        await createTestLocalUsers();
        await checkNewData();
      }
    }
    
    console.log('\n‚úÖ Migration ho√†n th√†nh!');
    console.log('üîÑ B√¢y gi·ªù h√£y refresh trang Settings');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh migrate:', error);
  }
}

// 7. C√°c function helper
async function justCheckData() {
  console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i...\n');
  
  console.log('--- OLD DATA (user-permissions) ---');
  await checkOldData();
  
  console.log('\n--- NEW DATA (local-user-permissions) ---');
  await checkNewData();
}

function reloadSettings() {
  console.log('üîÑ Reloading Settings...');
  window.location.reload();
}

// Commands
console.log('üìã C√°c l·ªánh c√≥ s·∫µn:');
console.log('- migrateLocalUsersData() - Migrate to√†n b·ªô d·ªØ li·ªáu');
console.log('- justCheckData() - Ch·ªâ ki·ªÉm tra d·ªØ li·ªáu');
console.log('- createTestLocalUsers() - T·∫°o test data');
console.log('- reloadSettings() - Reload trang');

// T·ª± ƒë·ªông ch·∫°y
migrateLocalUsersData(); 