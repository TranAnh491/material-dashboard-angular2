import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { FirebaseAuthService, User } from './firebase-auth.service';

@Injectable({
  providedIn: 'root'
})
export class RolePermissionService {

  constructor(private authService: FirebaseAuthService) { }

  // Ki·ªÉm tra xem user c√≥ quy·ªÅn truy c·∫≠p Settings kh√¥ng
  canAccessSettings(): Observable<boolean> {
    console.log('üîç RolePermissionService: Ki·ªÉm tra quy·ªÅn Settings...');
    
    return this.authService.currentUser.pipe(
      map(user => {
        console.log('üë§ RolePermissionService: User data:', user);
        
        if (!user) {
          console.log('‚ùå RolePermissionService: Kh√¥ng c√≥ user');
          return false;
        }
        
        console.log('üîë RolePermissionService: User role:', user.role);
        
        // Ch·ªâ cho ph√©p Admin v√† Qu·∫£n l√Ω truy c·∫≠p Settings
        const hasAccess = user.role === 'Admin' || user.role === 'Qu·∫£n l√Ω';
        console.log('‚úÖ RolePermissionService: K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn:', hasAccess);
        
        return hasAccess;
      })
    );
  }

  // Ki·ªÉm tra xem user c√≥ vai tr√≤ Admin kh√¥ng
  isAdmin(): Observable<boolean> {
    return this.authService.currentUser.pipe(
      map(user => {
        if (!user) return false;
        return user.role === 'Admin';
      })
    );
  }

  // Ki·ªÉm tra xem user c√≥ vai tr√≤ Qu·∫£n l√Ω kh√¥ng
  isManager(): Observable<boolean> {
    return this.authService.currentUser.pipe(
      map(user => {
        if (!user) return false;
        return user.role === 'Qu·∫£n l√Ω';
      })
    );
  }

  // Ki·ªÉm tra xem user c√≥ vai tr√≤ Admin ho·∫∑c Qu·∫£n l√Ω kh√¥ng
  isAdminOrManager(): Observable<boolean> {
    return this.authService.currentUser.pipe(
      map(user => {
        if (!user) return false;
        return user.role === 'Admin' || user.role === 'Qu·∫£n l√Ω';
      })
    );
  }

  // L·∫•y vai tr√≤ hi·ªán t·∫°i c·ªßa user
  getCurrentUserRole(): Observable<string | null> {
    return this.authService.currentUser.pipe(
      map(user => user?.role || null)
    );
  }
} 