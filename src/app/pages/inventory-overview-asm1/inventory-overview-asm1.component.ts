import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { Subject } from 'rxjs';
import { takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { FactoryAccessService } from '../../services/factory-access.service';
import { TabPermissionService } from '../../services/tab-permission.service';
import * as XLSX from 'xlsx';

interface InventoryOverviewItem {
  id: string;
  materialCode: string;
  materialName?: string; // Th√™m materialName
  poNumber: string;
  quantity: number;
  openingStock: number; // Th√™m openingStock ƒë·ªÉ gi·ªëng RM1 Inventory
  exported: number;
  xt: number;
  location: string;
  type: string;
  currentStock: number;
  isNegative: boolean;
  factory?: string; // Th√™m factory
  importDate?: string | Date; // Th√™m importDate
  batchNumber?: string; // Th√™m batchNumber
  // LinkQ fields
  linkQStock?: number;
  stockDifference?: number;
  hasDifference?: boolean;
}

interface LinkQFileInfo {
  id: string;
  fileName: string;
  uploadDate: Date;
  totalItems: number;
  processedItems: number;
  skippedItems: number;
  userId?: string;
  // Add actual LinkQ data storage
  linkQData?: { [materialCode: string]: number };
}

@Component({
  selector: 'app-inventory-overview-asm1',
  templateUrl: './inventory-overview-asm1.component.html',
  styleUrls: ['./inventory-overview-asm1.component.scss']
})
export class InventoryOverviewASM1Component implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();
  
  // Data
  inventoryItems: InventoryOverviewItem[] = [];
  filteredItems: InventoryOverviewItem[] = [];
  
  // Filter states
  showOnlyNegativeStock = false;
  searchTerm = '';
  
  // Filter mode states
  currentFilterMode: 'all' | 'negative' | 'linkq-difference' = 'all';
  
  // Group by states
  groupByType: 'po' | 'material' = 'po';
  isGroupByDropdownOpen = false;
  
  // More actions dropdown state
  isMoreActionsDropdownOpen = false;
  
  // LinkQ data
  linkQData: Map<string, number> = new Map(); // materialCode -> stock
  isLinkQDataLoaded = false;
  
  // LinkQ file management
  linkQFiles: LinkQFileInfo[] = [];
  currentLinkQFileId: string | null = null;
  
  // Loading states
  isLoading = false;
  isExporting = false;
  
  // Pagination
  currentPage = 1;
  itemsPerPage = 100;
  
  // Permissions
  hasAccess = false;
  
  constructor(
    private firestore: AngularFirestore,
    private factoryAccessService: FactoryAccessService,
    private tabPermissionService: TabPermissionService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    console.log('üöÄ InventoryOverviewASM1Component initialized');
    this.checkPermissions();
    
    // Fallback: if permission check takes too long, load data anyway
    setTimeout(() => {
      if (this.inventoryItems.length === 0 && !this.isLoading) {
        console.log('‚è∞ Permission check timeout, loading data anyway...');
        this.loadInventoryOverview();
      }
    }, 3000); // 3 seconds timeout
    
    // üîß S·ª¨A L·ªñI: B·ªè auto-refresh - ch·ªâ load khi user F5
    // this.startAutoRefresh();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // Check user permissions
  private async checkPermissions(): Promise<void> {
    try {
      console.log('üîê Checking permissions for inventory-overview-asm1...');
      
      // Use canAccessTab method instead of checkTabPermission
      this.tabPermissionService.canAccessTab('inventory-overview-asm1').subscribe(
        (hasAccess: boolean) => {
          this.hasAccess = hasAccess;
          console.log(`üîê Tab permission result for 'inventory-overview-asm1': ${this.hasAccess}`);
          
          if (!this.hasAccess) {
            console.warn('‚ö†Ô∏è User does not have access to this tab');
            // Still try to load data for debugging
            console.log('üîÑ Attempting to load data anyway for debugging...');
            this.loadInventoryOverview();
            return;
          }
          
          // Load data after permission check
          this.loadInventoryOverview();
        },
        (error) => {
          console.error('‚ùå Error checking permissions:', error);
          this.hasAccess = false;
          // Fallback: try to load data anyway
          console.log('üîÑ Permission check failed, attempting to load data anyway...');
          this.loadInventoryOverview();
        }
      );
    } catch (error) {
      console.error('‚ùå Error checking permissions:', error);
      this.hasAccess = false;
      // Fallback: try to load data anyway
      console.log('üîÑ Permission check failed, attempting to load data anyway...');
      this.loadInventoryOverview();
    }
  }

  // Load inventory overview data
  // QUAN TR·ªåNG: L·∫•y d·ªØ li·ªáu t·ª´ T·∫§T C·∫¢ c√°c collection ƒë·ªÉ ƒë·∫£m b·∫£o RM1 Inventory Overview 
  // hi·ªÉn th·ªã ch√≠nh x√°c nh·ªØng g√¨ c√≥ trong RM1 Inventory (kh√¥ng d∆∞, kh√¥ng thi·∫øu)
  private async loadInventoryOverview(): Promise<void> {
    // Remove permission check for debugging
    // if (!this.hasAccess) return;
    
    this.isLoading = true;
    console.log('üîÑ Loading inventory overview...');
    
    try {
      // Load LinkQ file history first
      await this.loadLinkQFileHistory();
      
      // üîß S·ª¨A L·ªñI: S·ª≠ d·ª•ng real-time listener thay v√¨ one-time snapshot
      // ƒê·ªÉ ƒë·∫£m b·∫£o RM1 Overview c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c khi c√≥ thay ƒë·ªïi t·ª´ RM1 Inventory
      console.log('üîç L·∫•y d·ªØ li·ªáu t·ª´ collection inventory-materials v·ªõi filter factory == ASM1...');
      
      // S·ª≠ d·ª•ng snapshotChanges() ƒë·ªÉ c√≥ real-time updates
      // üîß S·ª¨A L·ªñI: B·ªè orderBy ƒë·ªÉ tr√°nh c·∫ßn index
      this.firestore.collection('inventory-materials', ref => 
        ref.where('factory', '==', 'ASM1')
      )
      .snapshotChanges()
      .pipe(takeUntil(this.destroy$))
      .subscribe((actions) => {
        console.log(`üîÑ Real-time update: ${actions.length} ASM1 documents changed`);
        
        if (actions.length === 0) {
          console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ASM1 trong collection inventory-materials');
          this.inventoryItems = [];
          this.filteredItems = [];
          this.isLoading = false;
          return;
        }
        
        console.log(`‚úÖ Real-time update: ${actions.length} ASM1 documents trong collection inventory-materials`);
        
        // Process real-time changes
        this.processInventoryData(actions);
      });
      
      return; // Exit early since we're using subscription
      
    } catch (error) {
      console.error('‚ùå Error loading inventory overview:', error);
      // Show error in UI
      this.inventoryItems = [];
      this.filteredItems = [];
      this.isLoading = false;
    }
  }

  // Process real-time inventory data changes
  private processInventoryData(actions: any[]): void {
    try {
      console.log(`üìä Processing ${actions.length} real-time changes...`);
      
      const items: InventoryOverviewItem[] = [];
      let validItemsCount = 0;
      let invalidItemsCount = 0;
      
      actions.forEach((action, index) => {
        const data = action.payload.doc.data() as any;
        const docId = action.payload.doc.id;
        const changeType = action.type;
        
        // Log first few documents for debugging
        if (index < 3) {
          console.log(`üîç Real-time change ${index + 1} (${changeType}):`, {
            materialCode: data.materialCode,
            poNumber: data.poNumber,
            quantity: data.quantity,
            openingStock: data.openingStock,
            exported: data.exported,
            xt: data.xt,
            location: data.location,
            type: data.type
          });
        }
        
        // Skip deleted documents
        if (changeType === 'removed') {
          console.log(`üóëÔ∏è Document removed: ${docId}`);
          return;
        }
        
        // üîç FILTER: Lo·∫°i b·ªè d·ªØ li·ªáu scan sai
        const materialCode = data.materialCode || '';
        const poNumber = data.poNumber || '';
        
        // Debug cho m√£ B001239
        if (materialCode === 'B001239') {
          console.log(`üîç DEBUG B001239 (PO: ${poNumber}):`, {
            openingStock: data.openingStock,
            quantity: data.quantity,
            exported: data.exported,
            xt: data.xt,
            calculatedStock: (data.openingStock || 0) + (data.quantity || 0) - (data.exported || 0) - (data.xt || 0)
          });
        }
        
        // Ki·ªÉm tra m√£ h√†ng h·ª£p l·ªá (kh√¥ng ph·∫£i s·ªë ƒë∆°n gi·∫£n nh∆∞ "25")
        if (!this.isValidMaterialCode(materialCode)) {
          console.log(`‚ö†Ô∏è Skipping invalid material code: "${materialCode}" (PO: ${poNumber})`);
          invalidItemsCount++;
          return; // B·ªè qua d√≤ng n√†y
        }
        
        // Ki·ªÉm tra PO h·ª£p l·ªá
        if (!this.isValidPONumber(poNumber)) {
          console.log(`‚ö†Ô∏è Skipping invalid PO: "${poNumber}" (Material: ${materialCode})`);
          invalidItemsCount++;
          return; // B·ªè qua d√≤ng n√†y
        }
        
        // S·ª≠ d·ª•ng ƒë√∫ng field names t·ª´ collection inventory-materials
        const quantity = data.quantity || 0;
        const openingStock = data.openingStock || 0;
        const exported = data.exported || 0;
        const xt = data.xt || 0;
        
        // T√≠nh to√°n current stock gi·ªëng h·ªát nh∆∞ RM1 Inventory
        const currentStock = openingStock + quantity - exported - xt;
        
        // Debug cho m√£ B001627
        if (materialCode === 'B001627') {
          console.log(`üîç DEBUG LOAD B001627:`, {
            poNumber: poNumber,
            openingStock: openingStock,
            quantity: quantity,
            exported: exported,
            xt: xt,
            currentStock: currentStock
          });
        }
        
        // T·∫°o item m·ªõi v·ªõi LinkQ data n·∫øu c√≥
        const newItem: InventoryOverviewItem = {
          id: docId, // S·ª≠ d·ª•ng ID th·∫≠t t·ª´ Firebase
          materialCode: materialCode,
          materialName: data.materialName || '', // Th√™m materialName
          poNumber: poNumber,
          quantity: quantity,
          openingStock: openingStock,
          exported: exported,
          xt: xt,
          location: data.location || '',
          type: data.type || '',
          currentStock: currentStock,
          isNegative: currentStock < 0,
          factory: data.factory || 'ASM1', // Th√™m factory
          importDate: data.importDate || '', // Th√™m importDate
          batchNumber: data.batchNumber || '', // Th√™m batchNumber
          // üîß S·ª¨A L·ªñI: X·ª≠ l√Ω LinkQ data trong real-time update
          linkQStock: undefined,
          stockDifference: undefined,
          hasDifference: undefined
        };
        
        // N·∫øu c√≥ LinkQ data, t√≠nh to√°n comparison
        if (this.isLinkQDataLoaded && this.linkQData.has(materialCode)) {
          const linkQStock = this.linkQData.get(materialCode)!;
          const roundedCurrentStock = Math.round(currentStock);
          const roundedLinkQStock = Math.round(linkQStock);
          
          newItem.linkQStock = roundedLinkQStock;
          newItem.stockDifference = roundedCurrentStock - roundedLinkQStock;
          
          // Ch·ªâ hi·ªán l·ªách > 1 ho·∫∑c < -1
          const absDifference = Math.abs(newItem.stockDifference);
          newItem.hasDifference = absDifference > 1;
          
          // Debug log cho m·ªôt s·ªë items
          if (materialCode === 'B001627' || materialCode === 'B001239') {
            console.log(`üîç REAL-TIME LINKQ ${materialCode}:`, {
              currentStock: currentStock,
              linkQStock: linkQStock,
              stockDifference: newItem.stockDifference,
              hasDifference: newItem.hasDifference
            });
          }
        }
        
        items.push(newItem);
        
        validItemsCount++;
      });
      
      console.log(`‚úÖ Real-time update: ${validItemsCount} valid items, ${invalidItemsCount} invalid items skipped`);
      
      // Debug: ƒê·∫øm items c√≥ LinkQ data
      const itemsWithLinkQ = items.filter(item => item.linkQStock !== undefined).length;
      const itemsWithDifference = items.filter(item => item.hasDifference).length;
      console.log(`üìä Real-time update: ${itemsWithLinkQ} items c√≥ LinkQ data, ${itemsWithDifference} items c√≥ l·ªách`);
      
      // Sort by material code then PO (FIFO)
      items.sort((a, b) => {
        if (a.materialCode !== b.materialCode) {
          return a.materialCode.localeCompare(b.materialCode);
        }
        return a.poNumber.localeCompare(b.poNumber);
      });
      
      this.inventoryItems = items;
      this.filteredItems = [...items];
      
      console.log(`‚úÖ Real-time update: ${items.length} ASM1 inventory items t·ª´ collection inventory-materials`);
      console.log(`üìä Negative stock items: ${items.filter(item => item.isNegative).length}`);
      
      // Log negative stock items specifically
      const negativeItems = items.filter(item => item.isNegative);
      if (negativeItems.length > 0) {
        console.log('üî¥ Negative stock items found:');
        negativeItems.forEach(item => {
          console.log(`  - ${item.materialCode} (PO: ${item.poNumber}): Stock = ${item.currentStock}`);
        });
      }
      
      // Apply filters to refresh display
      console.log(`üîÑ Real-time update: Applying filters with mode ${this.currentFilterMode}, LinkQ loaded: ${this.isLinkQDataLoaded}`);
      this.applyFilters();
      
      // Force change detection
      this.cdr.detectChanges();
      
    } catch (error) {
      console.error('‚ùå Error processing real-time inventory data:', error);
    } finally {
      this.isLoading = false;
    }
  }

  // Toggle negative stock filter
  toggleNegativeStockFilter(): void {
    this.showOnlyNegativeStock = !this.showOnlyNegativeStock;
    this.applyFilters();
    console.log(`üîÑ Toggled negative stock filter: ${this.showOnlyNegativeStock}`);
  }

  // Cycle through filter modes
  cycleFilterMode(): void {
    if (this.currentFilterMode === 'all') {
      this.currentFilterMode = 'negative';
    } else if (this.currentFilterMode === 'negative') {
      if (this.isLinkQDataLoaded) {
        this.currentFilterMode = 'linkq-difference';
      } else {
        this.currentFilterMode = 'all';
      }
    } else {
      this.currentFilterMode = 'all';
    }
    
    console.log(`üîÑ Changed filter mode to: ${this.currentFilterMode}`);
    this.applyFilters();
  }

  // Get filter mode icon
  getFilterModeIcon(): string {
    switch (this.currentFilterMode) {
      case 'negative':
        return 'warning';
      case 'linkq-difference':
        return 'compare_arrows';
      default:
        return 'list';
    }
  }

  // Get filter mode text
  getFilterModeText(): string {
    switch (this.currentFilterMode) {
      case 'negative':
        return 'Ch·ªâ m√£ √¢m';
      case 'linkq-difference':
        return 'Ch·ªâ m√£ l·ªách LinkQ (>1)';
      default:
        return 'T·∫•t c·∫£';
    }
  }

  // Toggle group by dropdown
  toggleGroupByDropdown(): void {
    this.isGroupByDropdownOpen = !this.isGroupByDropdownOpen;
    console.log(`üîÑ Toggled group by dropdown: ${this.isGroupByDropdownOpen}`);
  }

  // Toggle more actions dropdown
  toggleMoreActionsDropdown(): void {
    this.isMoreActionsDropdownOpen = !this.isMoreActionsDropdownOpen;
    console.log(`üîÑ Toggled more actions dropdown: ${this.isMoreActionsDropdownOpen}`);
  }

  // Set group by type
  setGroupByType(type: 'po' | 'material'): void {
    console.log(`üîÑ Changing group by type from ${this.groupByType} to ${type}`);
    
    this.groupByType = type;
    this.isGroupByDropdownOpen = false;
    this.isMoreActionsDropdownOpen = false; // Close more actions dropdown too
    
    // üîß S·ª¨A L·ªñI: N·∫øu c√≥ LinkQ data v√† chuy·ªÉn sang group by material, 
    // c·∫ßn ƒë·∫£m b·∫£o comparison ƒë∆∞·ª£c t√≠nh to√°n l·∫°i
    if (this.isLinkQDataLoaded && type === 'material') {
      console.log('üîç LinkQ data detected, will recalculate comparison for material grouping');
    }
    
    this.applyFilters();
    console.log(`‚úÖ Changed group by type to: ${type}`);
  }

  // Group data by material code (sum up quantities, clear PO)
  private groupByMaterialCode(items: InventoryOverviewItem[]): InventoryOverviewItem[] {
    const groupedMap = new Map<string, InventoryOverviewItem>();
    
    items.forEach(item => {
      if (groupedMap.has(item.materialCode)) {
        // Add quantities for same material code
        const existing = groupedMap.get(item.materialCode)!;
        const oldStock = existing.currentStock;
        
        existing.openingStock += item.openingStock || 0;
        existing.quantity += item.quantity;
        existing.exported += item.exported;
        existing.xt += item.xt;
        
        // üîß S·ª¨A L·ªñI: T√≠nh l·∫°i currentStock t·ª´ c√°c th√†nh ph·∫ßn ƒë√£ c·ªông d·ªìn
        existing.currentStock = existing.openingStock + existing.quantity - existing.exported - existing.xt;
        
        // Debug cho m√£ B001627 (t·ª´ h√¨nh ·∫£nh)
        if (item.materialCode === 'B001627') {
          console.log(`üîç DEBUG GROUP B001627:`, {
            poNumber: item.poNumber,
            itemStock: item.currentStock,
            oldGroupedStock: oldStock,
            newGroupedStock: existing.currentStock,
            openingStock: existing.openingStock,
            quantity: existing.quantity,
            exported: existing.exported,
            xt: existing.xt,
            linkQStock: existing.linkQStock,
            stockDifference: existing.stockDifference
          });
        }
        
        // üîß L√ÄM TR√íN S·ªê: L√†m tr√≤n s·ªë t·ªìn kho sau khi t√≠nh to√°n
        existing.currentStock = Math.round(existing.currentStock);
        existing.isNegative = existing.currentStock < 0;
        
        // üîß S·ª¨A L·ªñI: LinkQ kh√¥ng ƒë∆∞·ª£c c·ªông d·ªìn, ch·ªâ gi·ªØ nguy√™n gi√° tr·ªã t·ª´ item ƒë·∫ßu ti√™n
        // V√¨ LinkQ l√† d·ªØ li·ªáu t·ª´ h·ªá th·ªëng b√™n ngo√†i, kh√¥ng n√™n c·ªông d·ªìn
        if (item.linkQStock !== undefined && existing.linkQStock === undefined) {
          // Ch·ªâ set LinkQ n·∫øu ch∆∞a c√≥ (t·ª´ item ƒë·∫ßu ti√™n g·∫∑p m√£ n√†y)
          existing.linkQStock = item.linkQStock;
          // T√≠nh to√°n l·∫°i stockDifference d·ª±a tr√™n currentStock m·ªõi (ƒë√£ c·ªông d·ªìn)
          existing.stockDifference = existing.currentStock - existing.linkQStock;
          // Ki·ªÉm tra l·∫°i hasDifference - ch·ªâ hi·ªán c√°c m√£ l·ªách l·ªõn h∆°n 1 v√† -1
          const absDifference = Math.abs(existing.stockDifference);
          existing.hasDifference = absDifference > 1;
          
          // Debug log cho vi·ªác group by material
          console.log(`üîç GROUP BY MATERIAL: ${item.materialCode}`, {
            poNumber: item.poNumber,
            itemLinkQ: item.linkQStock,
            groupedCurrentStock: existing.currentStock,
            groupedLinkQ: existing.linkQStock,
            stockDifference: existing.stockDifference
          });
        }
      } else {
        // Create new grouped item
        const groupedItem: InventoryOverviewItem = {
          id: item.materialCode, // Use material code as ID for grouped items
          materialCode: item.materialCode,
          materialName: item.materialName || '', // Th√™m materialName
          poNumber: '', // Clear PO for grouped view
          quantity: item.quantity,
          openingStock: item.openingStock || 0, // Th√™m openingStock
          exported: item.exported,
          xt: item.xt,
          location: item.location,
          type: item.type,
          currentStock: item.currentStock,
          isNegative: item.currentStock < 0,
          factory: item.factory || 'ASM1', // Th√™m factory
          importDate: item.importDate || '', // Th√™m importDate
          batchNumber: item.batchNumber || '', // Th√™m batchNumber
          // Copy LinkQ data
          linkQStock: item.linkQStock,
          stockDifference: item.stockDifference,
          hasDifference: item.linkQStock !== undefined ? Math.abs(item.stockDifference || 0) > 1 : false
        };
        
        // Debug cho m√£ B001627 (t·ª´ h√¨nh ·∫£nh)
        if (item.materialCode === 'B001627') {
          console.log(`üîç DEBUG NEW GROUP B001627:`, {
            poNumber: item.poNumber,
            itemStock: item.currentStock,
            openingStock: item.openingStock,
            quantity: item.quantity,
            exported: item.exported,
            xt: item.xt,
            linkQStock: item.linkQStock,
            stockDifference: item.stockDifference
          });
        }
        
        groupedMap.set(item.materialCode, groupedItem);
      }
    });
    
    // üîß S·ª¨A L·ªñI: Sau khi group, c·∫ßn t√≠nh to√°n l·∫°i t·∫•t c·∫£ LinkQ comparison
    const groupedItems = Array.from(groupedMap.values());
    this.recalculateLinkQComparisonForGroupedItems(groupedItems);
    
    return groupedItems;
  }

  // Recalculate LinkQ comparison for grouped items
  private recalculateLinkQComparisonForGroupedItems(groupedItems: InventoryOverviewItem[]): void {
    console.log('üîç Recalculating LinkQ comparison for grouped items...');
    
    let updatedCount = 0;
    let differenceCount = 0;
    
    groupedItems.forEach(item => {
      if (item.linkQStock !== undefined) {
        // üîß L√ÄM TR√íN S·ªê: L√†m tr√≤n s·ªë t·ªìn kho hi·ªán t·∫°i th√†nh s·ªë ch·∫µn
        const roundedCurrentStock = Math.round(item.currentStock);
        const roundedLinkQStock = Math.round(item.linkQStock);
        
        // T√≠nh to√°n l·∫°i stockDifference d·ª±a tr√™n currentStock m·ªõi (ƒë√£ ƒë∆∞·ª£c c·ªông d·ªìn)
        item.stockDifference = roundedCurrentStock - roundedLinkQStock;
        
        // Ki·ªÉm tra l·∫°i hasDifference - ch·ªâ hi·ªán c√°c m√£ l·ªách l·ªõn h∆°n 1 v√† -1
        const absDifference = Math.abs(item.stockDifference);
        item.hasDifference = absDifference > 1;
        
        // Debug log cho vi·ªác t√≠nh hasDifference
        if (item.materialCode === 'B001627' || item.materialCode === 'B001239') {
          console.log(`üîç DEBUG HASDIFFERENCE ${item.materialCode}:`, {
            currentStock: item.currentStock,
            linkQStock: item.linkQStock,
            stockDifference: item.stockDifference,
            absDifference: absDifference,
            hasDifference: item.hasDifference
          });
        }
        
        if (item.hasDifference) {
          differenceCount++;
        }
        
        updatedCount++;
        
        // Log debug cho m·ªôt s·ªë items ƒë·∫ßu ti√™n
        if (updatedCount <= 5) {
          console.log(`üîç Grouped ${item.materialCode}: Current=${item.currentStock}‚Üí${roundedCurrentStock}, LinkQ=${item.linkQStock}‚Üí${roundedLinkQStock}, Diff=${item.stockDifference}, HasDiff=${item.hasDifference}`);
        }
      }
    });
    
    console.log(`‚úÖ LinkQ comparison recalculated for grouped items: ${updatedCount} items processed, ${differenceCount} items have differences`);
  }

  // Apply filters
  applyFilters(): void {
    console.log('üîç Starting applyFilters...');
    console.log(`üìä Inventory items: ${this.inventoryItems.length}, LinkQ loaded: ${this.isLinkQDataLoaded}`);
    console.log(`üîç Current filter mode: ${this.currentFilterMode}, Group by: ${this.groupByType}`);
    
    // üîß S·ª¨A L·ªñI: T·∫°o deep copy ƒë·ªÉ kh√¥ng l√†m m·∫•t d·ªØ li·ªáu LinkQ
    let filtered = this.inventoryItems.map(item => {
      const copy = { ...item };
      // ƒê·∫£m b·∫£o d·ªØ li·ªáu LinkQ ƒë∆∞·ª£c copy ƒë√∫ng
      copy.linkQStock = item.linkQStock;
      copy.stockDifference = item.stockDifference;
      copy.hasDifference = item.hasDifference;
      
      // üîß S·ª¨A L·ªñI: ƒê·∫£m b·∫£o currentStock ƒë∆∞·ª£c copy ƒë√∫ng
      copy.currentStock = item.currentStock;
      
      return copy;
    });
    
    // üîß S·ª¨A L·ªñI: Group by material TR∆Ø·ªöC khi filter LinkQ difference
    // ƒê·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ items c√≥ c√πng m√£ h√†ng ƒë∆∞·ª£c c·ªông d·ªìn tr∆∞·ªõc khi filter
    if (this.groupByType === 'material') {
      const beforeGroup = filtered.length;
      filtered = this.groupByMaterialCode(filtered);
      console.log(`üîç Material grouping (before filter): ${beforeGroup} ‚Üí ${filtered.length} items`);
    }
    
    // Filter by current filter mode
    switch (this.currentFilterMode) {
      case 'negative':
        filtered = filtered.filter(item => item.isNegative);
        console.log(`üîç Negative filter: ${filtered.length} items`);
        break;
      case 'linkq-difference':
        if (this.isLinkQDataLoaded) {
          // üîß S·ª¨A L·ªñI: Ch·ªâ hi·ªán c√°c d√≤ng l·ªách t·ª´ s·ªë 1 v√† -1 (lo·∫°i b·ªè t·ª´ -1 ƒë·∫øn 1)
          const beforeFilter = filtered.length;
          filtered = filtered.filter(item => {
            if (item.stockDifference === undefined) return false;
            const absDifference = Math.abs(item.stockDifference);
            
            // Debug cho B001627
            if (item.materialCode === 'B001627') {
              console.log(`üîç DEBUG FILTER B001627:`, {
                currentStock: item.currentStock,
                linkQStock: item.linkQStock,
                stockDifference: item.stockDifference,
                absDifference: absDifference,
                willShow: absDifference > 1
              });
            }
            
            return absDifference > 1; // Ch·ªâ hi·ªán l·ªách > 1 ho·∫∑c < -1
          });
          console.log(`üîç LinkQ difference filter: ${beforeFilter} ‚Üí ${filtered.length} items (only differences > 1 or < -1)`);
        } else {
          console.log('‚ö†Ô∏è LinkQ data not loaded, cannot filter by differences');
        }
        break;
      default:
        // 'all' - no additional filtering
        console.log(`üîç All items filter: ${filtered.length} items`);
        break;
    }
    
    // Filter by search term
    if (this.searchTerm.trim()) {
      const searchLower = this.searchTerm.toLowerCase();
      const beforeSearch = filtered.length;
      filtered = filtered.filter(item => 
        item.materialCode.toLowerCase().includes(searchLower) ||
        item.poNumber.toLowerCase().includes(searchLower)
      );
      console.log(`üîç Search filter: ${beforeSearch} ‚Üí ${filtered.length} items`);
    }
    
    // If groupByType === 'po', keep original structure (no grouping needed)
    
    
    this.filteredItems = filtered;
    this.currentPage = 1; // Reset to first page
    
    // üîß S·ª¨A L·ªñI: Ki·ªÉm tra d·ªØ li·ªáu LinkQ sau khi filter
    const itemsWithLinkQ = filtered.filter(item => item.linkQStock !== undefined).length;
    const itemsWithDifference = filtered.filter(item => item.hasDifference).length;
    
    // Debug cho B001627
    const b001627Item = filtered.find(item => item.materialCode === 'B001627');
    if (b001627Item) {
      console.log(`üîç DEBUG FINAL B001627:`, {
        currentStock: b001627Item.currentStock,
        linkQStock: b001627Item.linkQStock,
        stockDifference: b001627Item.stockDifference,
        hasDifference: b001627Item.hasDifference,
        filterMode: this.currentFilterMode
      });
    }
    
    console.log(`‚úÖ Applied filters: ${filtered.length} items shown`);
    console.log(`üìä LinkQ data preserved: ${itemsWithLinkQ} items have LinkQ data`);
    console.log(`üìä Items with differences: ${itemsWithDifference} items`);
    console.log(`üîç Filter mode: ${this.currentFilterMode}, Group by: ${this.groupByType}`);
    
  }

  // Clear search
  clearSearch(): void {
    this.searchTerm = '';
    this.currentFilterMode = 'all'; // Reset to show all items
    this.groupByType = 'po'; // Reset to PO view
    this.isGroupByDropdownOpen = false; // Close group by dropdown
    this.isMoreActionsDropdownOpen = false; // Close more actions dropdown
    this.applyFilters();
  }

  // Get paginated items
  get paginatedItems(): InventoryOverviewItem[] {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    return this.filteredItems.slice(startIndex, endIndex);
  }

  // Get total pages
  get totalPages(): number {
    return Math.ceil(this.filteredItems.length / this.itemsPerPage);
  }

  // Change page
  changePage(page: number): void {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
    }
  }

  // Get negative stock count
  get negativeStockCount(): number {
    return this.inventoryItems.filter(item => item.isNegative).length;
  }

  // Get total items count
  get totalItemsCount(): number {
    return this.inventoryItems.length;
  }

  // Get LinkQ difference count
  get linkQDifferenceCount(): number {
    if (!this.isLinkQDataLoaded) return 0;
    return this.inventoryItems.filter(item => item.hasDifference).length;
  }

  // Export to Excel
  exportToExcel(): void {
    if (this.filteredItems.length === 0) {
      console.warn('‚ö†Ô∏è No data to export');
      return;
    }

    try {
      console.log('üìä Exporting to Excel...');
      
      // Prepare data for export
      const exportData = this.filteredItems.map(item => {
        const row: any = {
          'M√£ h√†ng': item.materialCode
        };
        
        if (this.groupByType === 'po') {
          row['PO'] = item.poNumber;
        }
        
        row['T·ªìn kho'] = item.currentStock;
        row['V·ªã tr√≠'] = item.location || '-';
        
        if (this.isLinkQDataLoaded) {
          row['LinkQ'] = item.linkQStock !== undefined ? item.linkQStock : '-';
          row['So S√°nh'] = item.stockDifference !== undefined ? item.stockDifference : '-';
        }
        
        return row;
      });

      // Create workbook and worksheet
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.json_to_sheet(exportData);

      // Auto-size columns
      const colWidths = [
        { wch: 15 }, // M√£ h√†ng
        ...(this.groupByType === 'po' ? [{ wch: 15 }] : []), // PO (if applicable)
        { wch: 12 }, // T·ªìn kho
        { wch: 15 }, // V·ªã tr√≠
        ...(this.isLinkQDataLoaded ? [{ wch: 12 }, { wch: 12 }] : []) // LinkQ, So S√°nh (if applicable)
      ];
      ws['!cols'] = colWidths;

      // Add worksheet to workbook
      const sheetName = this.groupByType === 'po' ? 'RM1_Inventory_PO' : 'RM1_Inventory_Material';
      XLSX.utils.book_append_sheet(wb, ws, sheetName);

      // Generate filename
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const filename = `${sheetName}_${timestamp}.xlsx`;

      // Save file
      XLSX.writeFile(wb, filename);
      
      console.log(`‚úÖ Excel exported successfully: ${filename}`);
    } catch (error) {
      console.error('‚ùå Error exporting to Excel:', error);
    }
  }

  // Download full report with all data
  downloadFullReport(): void {
    if (this.inventoryItems.length === 0) {
      console.warn('‚ö†Ô∏è No data to export');
      alert('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i b√°o c√°o');
      return;
    }

    try {
      console.log('üìä Downloading full report...');
      
      // Prepare comprehensive data for export
      const exportData = this.inventoryItems.map(item => {
        const row: any = {
          'M√£ h√†ng': item.materialCode,
          'T√™n h√†ng': item.materialName || '',
          'PO': item.poNumber || '',
          'T·ªìn ƒë·∫ßu': item.openingStock || 0,
          'NK': item.quantity || 0,
          'ƒê√£ xu·∫•t': item.exported || 0,
          'XT': item.xt || 0,
          'T·ªìn kho': item.currentStock,
          'V·ªã tr√≠': item.location || '-',
          'Lo·∫°i h√¨nh': item.type || '',
          'Factory': item.factory || 'ASM1',
          'Ng√†y nh·∫≠p': item.importDate ? (typeof item.importDate === 'string' ? item.importDate : (item.importDate instanceof Date ? item.importDate.toLocaleDateString('vi-VN') : String(item.importDate))) : '-',
          'Batch': item.batchNumber || '',
          'Tr·∫°ng th√°i': item.isNegative ? 'T·ªìn kho √¢m' : 'B√¨nh th∆∞·ªùng'
        };
        
        if (this.isLinkQDataLoaded) {
          row['LinkQ Stock'] = item.linkQStock !== undefined ? item.linkQStock : '-';
          row['Ch√™nh l·ªách'] = item.stockDifference !== undefined ? item.stockDifference : '-';
          row['C√≥ l·ªách'] = item.hasDifference ? 'C√≥' : 'Kh√¥ng';
        }
        
        return row;
      });

      // Create workbook and worksheet
      const wb = XLSX.utils.book_new();
      const ws = XLSX.utils.json_to_sheet(exportData);

      // Set column widths for better readability
      const colWidths = [
        { wch: 15 }, // M√£ h√†ng
        { wch: 25 }, // T√™n h√†ng
        { wch: 15 }, // PO
        { wch: 12 }, // T·ªìn ƒë·∫ßu
        { wch: 12 }, // NK
        { wch: 12 }, // ƒê√£ xu·∫•t
        { wch: 12 }, // XT
        { wch: 12 }, // T·ªìn kho
        { wch: 15 }, // V·ªã tr√≠
        { wch: 12 }, // Lo·∫°i h√¨nh
        { wch: 10 }, // Factory
        { wch: 12 }, // Ng√†y nh·∫≠p
        { wch: 15 }, // Batch
        { wch: 15 }, // Tr·∫°ng th√°i
        ...(this.isLinkQDataLoaded ? [{ wch: 12 }, { wch: 12 }, { wch: 10 }] : []) // LinkQ columns
      ];
      ws['!cols'] = colWidths;

      // Add worksheet to workbook
      const sheetName = 'RM1_Inventory_Full_Report';
      XLSX.utils.book_append_sheet(wb, ws, sheetName);

      // Generate filename
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const filename = `RM1_Inventory_Full_Report_${timestamp}.xlsx`;

      // Save file
      XLSX.writeFile(wb, filename);
      
      console.log(`‚úÖ Full report downloaded successfully: ${filename}`);
      alert(`‚úÖ ƒê√£ t·∫£i b√°o c√°o ƒë·∫ßy ƒë·ªß: ${filename}\n\nüìä T·ªïng s·ªë d√≤ng: ${exportData.length}\nüìÖ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`);
    } catch (error) {
      console.error('‚ùå Error downloading full report:', error);
      alert('‚ùå L·ªói khi t·∫£i b√°o c√°o: ' + error.message);
    }
  }

  // Refresh data
  refreshData(): void {
    console.log('üîÑ Manual refresh requested');
    
    // If LinkQ data is loaded, ask user if they want to refresh
    if (this.isLinkQDataLoaded) {
      const shouldRefresh = confirm(
        '‚ö†Ô∏è B·∫°n ƒëang c√≥ d·ªØ li·ªáu LinkQ ƒë·ªÉ so s√°nh.\n\n' +
        'N·∫øu refresh, d·ªØ li·ªáu LinkQ s·∫Ω b·ªã m·∫•t v√† b·∫°n c·∫ßn load l·∫°i.\n\n' +
        'B·∫°n c√≥ ch·∫Øc mu·ªën refresh kh√¥ng?\n\n' +
        '‚Ä¢ Nh·∫•n OK ƒë·ªÉ refresh (m·∫•t d·ªØ li·ªáu LinkQ)\n' +
        '‚Ä¢ Nh·∫•n Cancel ƒë·ªÉ gi·ªØ nguy√™n d·ªØ li·ªáu LinkQ'
      );
      
      if (shouldRefresh) {
        // Clear LinkQ data and refresh
        this.clearLinkQData();
        this.loadInventoryOverview();
      } else {
        console.log('‚è∏Ô∏è User cancelled refresh to preserve LinkQ data');
      }
    } else {
      // No LinkQ data, safe to refresh
      this.loadInventoryOverview();
    }
  }

  // Clear LinkQ data
  private clearLinkQData(): void {
    console.log('üóëÔ∏è Clearing LinkQ data...');
    this.linkQData.clear();
    this.isLinkQDataLoaded = false;
    this.currentLinkQFileId = null;
    
    // Clear LinkQ data from all items
    this.inventoryItems.forEach(item => {
      item.linkQStock = undefined;
      item.stockDifference = undefined;
      item.hasDifference = undefined;
    });
    
    this.filteredItems.forEach(item => {
      item.linkQStock = undefined;
      item.stockDifference = undefined;
      item.hasDifference = undefined;
    });
    
    console.log('‚úÖ LinkQ data cleared');
  }
  

  // üîß Force refresh LinkQ data (fix cho d·ªØ li·ªáu b·ªã m·∫•t)
  forceRefreshLinkQData(): void {
    try {
      console.log('üîÑ Force refreshing LinkQ data...');
      
      if (this.linkQFiles.length === 0) {
        console.log('‚ö†Ô∏è No LinkQ files available');
        return;
      }
      
      // Load l·∫°i d·ªØ li·ªáu LinkQ t·ª´ file g·∫ßn nh·∫•t
      this.autoLoadMostRecentLinkQData().then(() => {
        // Update stock comparison silently to avoid page reload
        this.updateStockComparisonSilently();
        
        // Apply filters ƒë·ªÉ refresh display
        this.applyFilters();
        
        console.log('‚úÖ LinkQ data force refreshed successfully');
      });
      
    } catch (error) {
      console.error('‚ùå Error force refreshing LinkQ data:', error);
    }
  }

  // Refresh LinkQ data without losing current data
  refreshLinkQDataOnly(): void {
    try {
      console.log('üîÑ Refreshing LinkQ data only...');
      
      if (this.linkQFiles.length === 0) {
        console.log('‚ö†Ô∏è No LinkQ files available');
        return;
      }
      
      // Load l·∫°i d·ªØ li·ªáu LinkQ t·ª´ file g·∫ßn nh·∫•t
      this.autoLoadMostRecentLinkQData().then(() => {
        // Update stock comparison silently to avoid page reload
        this.updateStockComparisonSilently();
        
        // Apply filters ƒë·ªÉ refresh display
        this.applyFilters();
        
        console.log('‚úÖ LinkQ data refreshed successfully without losing current data');
      });
      
    } catch (error) {
      console.error('‚ùå Error refreshing LinkQ data:', error);
    }
  }

  // Recalculate LinkQ comparison for current view (useful when switching between PO and Material views)
  recalculateLinkQComparison(): void {
    try {
      console.log('üîç Manually recalculating LinkQ comparison...');
      
      if (!this.isLinkQDataLoaded) {
        console.log('‚ö†Ô∏è No LinkQ data loaded, nothing to recalculate');
        return;
      }
      
      if (this.groupByType === 'material') {
        // N·∫øu ƒëang group by material, c·∫ßn recalculate cho grouped items
        this.recalculateLinkQComparisonForGroupedItems(this.filteredItems);
      } else {
        // N·∫øu ƒëang group by PO, s·ª≠ d·ª•ng method th√¥ng th∆∞·ªùng
        this.updateStockComparisonSilently();
      }
      
      // Apply filters ƒë·ªÉ refresh display
      this.applyFilters();
      
      console.log('‚úÖ LinkQ comparison recalculated successfully');
      
    } catch (error) {
      console.error('‚ùå Error recalculating LinkQ comparison:', error);
    }
  }
  
  // üîß S·ª¨A L·ªñI: B·ªè auto refresh ho√†n to√†n - ch·ªâ load khi user F5
  // V·ªõi real-time listener, kh√¥ng c·∫ßn auto refresh n·ªØa
  private startAutoRefresh(): void {
    console.log('‚ÑπÔ∏è Auto-refresh disabled - data will only refresh when user manually refreshes page');
    // B·ªè auto refresh ho√†n to√†n
  }

  // Import LinkQ stock data
  async importLinkQData(): Promise<void> {
    try {
      console.log('üì• Importing LinkQ stock data...');
      
      // Create file input element
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = '.xlsx,.xls,.csv';
      fileInput.style.display = 'none';
      
      fileInput.onchange = async (event: any) => {
        const file = event.target.files[0];
        if (!file) return;
        
        try {
          // Read Excel file
          const data = await this.readLinkQExcelFile(file);
          console.log('üìä LinkQ Excel data read:', data);
          
          // Process LinkQ data
          await this.processLinkQData(data, file.name);
          
          // Update stock comparison silently to avoid page reload
          this.updateStockComparisonSilently();
          
          // Show success message
          alert(`‚úÖ ƒê√£ import th√†nh c√¥ng d·ªØ li·ªáu LinkQ!\n\nüì¶ T·ªïng s·ªë m√£ h√†ng: ${this.linkQData.size}\nüîÑ D·ªØ li·ªáu c≈© ƒë√£ ƒë∆∞·ª£c ghi ƒë√® ho√†n to√†n\nüîç H·ªá th·ªëng s·∫Ω so s√°nh v·ªõi t·ªìn kho hi·ªán t·∫°i\n\nüìä L∆∞u √Ω: T·∫•t c·∫£ s·ªë li·ªáu ƒë·ªÅu ƒë∆∞·ª£c l√†m tr√≤n th√†nh s·ªë ch·∫µn ƒë·ªÉ so s√°nh ch√≠nh x√°c\n\n‚ö†Ô∏è Ki·ªÉm tra console ƒë·ªÉ xem chi ti·∫øt duplicate (n·∫øu c√≥)`);
          
        } catch (error) {
          console.error('‚ùå Error importing LinkQ data:', error);
          alert('‚ùå L·ªói khi import d·ªØ li·ªáu LinkQ: ' + error.message);
        } finally {
          // Remove file input
          document.body.removeChild(fileInput);
        }
      };
      
      // Trigger file selection
      document.body.appendChild(fileInput);
      fileInput.click();
      
    } catch (error) {
      console.error('‚ùå Error in importLinkQData:', error);
      alert('‚ùå L·ªói khi import d·ªØ li·ªáu LinkQ: ' + error.message);
    }
  }

  // Download LinkQ Excel template
  downloadLinkQTemplate(): void {
    try {
      console.log('üì• Downloading LinkQ template...');
      
      // Create sample data for template
      const templateData = [
        {
          'M√£ h√†ng': 'B001003',
          'T·ªìn kho': 100
        },
        {
          'M√£ h√†ng': 'P0123',
          'T·ªìn kho': 50
        },
        {
          'M√£ h√†ng': 'B018694',
          'T·ªìn kho': 200
        },
        {
          'M√£ h√†ng': 'A001234',
          'T·ªìn kho': 75
        },
        {
          'M√£ h√†ng': 'C005678',
          'T·ªìn kho': 150
        }
      ];
      
      // Create workbook and worksheet
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(templateData);
      
      // Set column widths
      worksheet['!cols'] = [
        { width: 20 },  // M√£ h√†ng
        { width: 15 }   // T·ªìn kho
      ];
      
      // Add worksheet to workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, 'LinkQ Template');
      
      // Generate file and download
      const fileName = `LinkQ_Template_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(workbook, fileName);
      
      console.log('‚úÖ LinkQ template downloaded successfully');
      alert('‚úÖ ƒê√£ t·∫£i template LinkQ!\n\nüìã Template c√≥ 2 c·ªôt:\n‚Ä¢ M√£ h√†ng: M√£ s·∫£n ph·∫©m\n‚Ä¢ T·ªìn kho: S·ªë l∆∞·ª£ng t·ªìn kho\n\nüí° B·∫°n c√≥ th·ªÉ copy d·ªØ li·ªáu t·ª´ h·ªá th·ªëng LinkQ v√†o template n√†y ƒë·ªÉ import.');
      
    } catch (error) {
      console.error('‚ùå Error downloading template:', error);
      alert('‚ùå L·ªói khi t·∫£i template: ' + error.message);
    }
  }

  // Download LinkQ comparison report
  downloadLinkQComparisonReport(): void {
    try {
      if (!this.isLinkQDataLoaded) {
        alert('‚ö†Ô∏è Vui l√≤ng import d·ªØ li·ªáu LinkQ tr∆∞·ªõc khi t·∫£i b√°o c√°o so s√°nh!');
        return;
      }
      
      console.log('üìä Downloading LinkQ comparison report...');
      
      let comparisonData;
      let colWidths;
      let fileName;
      
      if (this.groupByType === 'material') {
        // Export grouped by material code (no PO column)
        comparisonData = this.filteredItems.map(item => {
          const linkQStock = item.linkQStock || 0;
          const stockDifference = item.currentStock - linkQStock;
          const hasDifference = stockDifference > 1 || stockDifference < -1;
          
          return {
            'M√£ h√†ng': item.materialCode,
            'T·ªìn kho hi·ªán t·∫°i': item.currentStock,
            'T·ªìn kho LinkQ': linkQStock,
            'Ch√™nh l·ªách': stockDifference,
            'C√≥ l·ªách': hasDifference ? 'C√≥' : 'Kh√¥ng',
            'Ghi ch√∫': hasDifference ? 
              (stockDifference > 0 ? 'H·ªá th·ªëng > LinkQ' : 'H·ªá th·ªëng < LinkQ') : 
              'Kh√¥ng c√≥ l·ªách'
          };
        });
        
        // Set column widths for material view
        colWidths = [
          { wch: 15 },  // M√£ h√†ng
          { wch: 18 },  // T·ªìn kho hi·ªán t·∫°i
          { wch: 18 },  // T·ªìn kho LinkQ
          { wch: 15 },  // Ch√™nh l·ªách
          { wch: 12 },  // C√≥ l·ªách
          { wch: 25 }   // Ghi ch√∫
        ];
        
        fileName = `LinkQ_Comparison_Report_Material_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;
        
      } else {
        // Export by PO (original format with PO column)
        comparisonData = this.filteredItems.map(item => {
          const linkQStock = item.linkQStock || 0;
          const stockDifference = item.currentStock - linkQStock;
          const hasDifference = stockDifference > 1 || stockDifference < -1;
          
          return {
            'M√£ h√†ng': item.materialCode,
            'PO': item.poNumber,
            'T·ªìn kho hi·ªán t·∫°i': item.currentStock,
            'T·ªìn kho LinkQ': linkQStock,
            'Ch√™nh l·ªách': stockDifference,
            'C√≥ l·ªách': hasDifference ? 'C√≥' : 'Kh√¥ng',
            'Ghi ch√∫': hasDifference ? 
              (stockDifference > 0 ? 'H·ªá th·ªëng > LinkQ' : 'H·ªá th·ªëng < LinkQ') : 
              'Kh√¥ng c√≥ l·ªách'
          };
        });
        
        // Set column widths for PO view
        colWidths = [
          { wch: 15 },  // M√£ h√†ng
          { wch: 20 },  // PO
          { wch: 18 },  // T·ªìn kho hi·ªán t·∫°i
          { wch: 18 },  // T·ªìn kho LinkQ
          { wch: 15 },  // Ch√™nh l·ªách
          { wch: 12 },  // C√≥ l·ªách
          { wch: 25 }   // Ghi ch√∫
        ];
        
        fileName = `LinkQ_Comparison_Report_PO_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;
      }
      
      // Create workbook and worksheet
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(comparisonData);
      
      // Set column widths
      worksheet['!cols'] = colWidths;
      
      // Add worksheet to workbook
      const sheetName = this.groupByType === 'material' ? 'So S√°nh LinkQ (Theo M√£ H√†ng)' : 'So S√°nh LinkQ (Theo PO)';
      XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);
      
      // Generate file and download
      XLSX.writeFile(workbook, fileName);
      
      // Calculate summary statistics
      const totalItems = comparisonData.length;
      const itemsWithDifference = comparisonData.filter(item => item['C√≥ l·ªách'] === 'C√≥').length;
      const positiveDifferences = comparisonData.filter(item => item['Ch√™nh l·ªách'] > 0).length;
      const negativeDifferences = comparisonData.filter(item => item['Ch√™nh l·ªách'] < 0).length;
      
      console.log(`‚úÖ LinkQ comparison report downloaded successfully (${this.groupByType} view)`);
      alert(`‚úÖ ƒê√£ t·∫£i b√°o c√°o so s√°nh LinkQ!\n\nüìä Th·ªëng k√™ (${this.groupByType === 'material' ? 'Theo M√£ H√†ng' : 'Theo PO'}):\n‚Ä¢ T·ªïng m√£ h√†ng: ${totalItems}\n‚Ä¢ M√£ c√≥ l·ªách: ${itemsWithDifference}\n‚Ä¢ L·ªách d∆∞∆°ng: ${positiveDifferences}\n‚Ä¢ L·ªách √¢m: ${negativeDifferences}\n\nüìÅ File: ${fileName}`);
      
    } catch (error) {
      console.error('‚ùå Error downloading comparison report:', error);
      alert('‚ùå L·ªói khi t·∫£i b√°o c√°o so s√°nh: ' + error.message);
    }
  }

  // Read LinkQ Excel file
  private async readLinkQExcelFile(file: File): Promise<any[]> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e: any) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          resolve(jsonData);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = reject;
      reader.readAsArrayBuffer(file);
    });
  }

  // Process LinkQ data from Excel
  private async processLinkQData(data: any[], fileName: string): Promise<void> {
    try {
      // Clear old LinkQ data completely before processing new data
      this.linkQData.clear();
      
      // Reset LinkQ-related fields in all inventory items
      this.inventoryItems.forEach(item => {
        item.linkQStock = undefined;
        item.stockDifference = undefined;
        item.hasDifference = undefined;
      });
      
      // Reset LinkQ data loaded flag
      this.isLinkQDataLoaded = false;
      
      console.log('üßπ Cleared old LinkQ data, processing new import...');
      
      // Delete old LinkQ files from Firebase
      await this.deleteOldLinkQFiles();
      
      // Debug: Log the first few rows to see actual column names
      if (data.length > 0) {
        console.log('üîç DEBUG: First row structure:', data[0]);
        console.log('üîç DEBUG: Available column names:', Object.keys(data[0]));
        
        // Log first 3 rows for debugging
        data.slice(0, 3).forEach((row, index) => {
          console.log(`üîç DEBUG: Row ${index + 1}:`, row);
        });
        
        // üîß KI·ªÇM TRA DUPLICATE: Ph√¢n t√≠ch file Excel tr∆∞·ªõc khi x·ª≠ l√Ω
        this.analyzeExcelDuplicates(data);
      }
      
      let processedCount = 0;
      let skippedCount = 0;
      let duplicateCount = 0;
      
      // üîß S·ª¨A L·ªñI: T·∫°o Map ƒë·ªÉ track duplicate material codes
      const materialCodeCount = new Map<string, number>();
      
      data.forEach((row, index) => {
        // Try multiple possible column names for material code
        const materialCode = row['M√£ h√†ng'] || 
                            row['materialCode'] || 
                            row['M√£'] || 
                            row['Code'] || 
                            row['Material'] || 
                            row['Item'] ||
                            row['Part'] ||
                            row['SKU'] ||
                            row['Product'] ||
                            row['Item Code'] ||
                            row['Part Number'] ||
                            row['Material Code'] ||
                            row['Product Code'] ||
                            '';
        
        // Try multiple possible column names for stock/quantity
        let stock = parseFloat(row['T·ªìn kho'] || 
                                row['stock'] || 
                                row['Stock'] || 
                                row['S·ªë l∆∞·ª£ng'] || 
                                row['Quantity'] || 
                                row['Qty'] ||
                                row['Amount'] ||
                                row['Total'] ||
                                row['Available'] ||
                                row['On Hand'] ||
                                row['Inventory'] ||
                                row['Balance'] ||
                                '0') || 0;
        
        // üîß L√ÄM TR√íN S·ªê: L√†m tr√≤n s·ªë t·ª´ file LinkQ th√†nh s·ªë ch·∫µn
        stock = Math.round(stock);
        
        if (materialCode && materialCode.toString().trim() !== '') {
          const trimmedCode = materialCode.toString().trim();
          
          // üîß S·ª¨A L·ªñI: Ki·ªÉm tra duplicate trong file Excel
          if (materialCodeCount.has(trimmedCode)) {
            const currentCount = materialCodeCount.get(trimmedCode)!;
            materialCodeCount.set(trimmedCode, currentCount + 1);
            duplicateCount++;
            
            console.log(`‚ö†Ô∏è DUPLICATE: Material code "${trimmedCode}" appears ${currentCount + 1} times in Excel file (row ${index + 1})`);
            
            // C√≥ th·ªÉ ch·ªçn: ghi ƒë√®, c·ªông d·ªìn, ho·∫∑c b·ªè qua
            // Hi·ªán t·∫°i: ghi ƒë√® v·ªõi gi√° tr·ªã m·ªõi nh·∫•t
            this.linkQData.set(trimmedCode, stock);
            console.log(`üîÑ Overwrote with latest value: ${trimmedCode} -> ${stock}`);
          } else {
            // L·∫ßn ƒë·∫ßu ti√™n g·∫∑p m√£ n√†y
            materialCodeCount.set(trimmedCode, 1);
            this.linkQData.set(trimmedCode, stock);
            processedCount++;
            
            // Log first few successful items for debugging
            if (processedCount <= 5) {
              console.log(`‚úÖ DEBUG: Processed item ${processedCount}: ${trimmedCode} -> ${stock}`);
            }
          }
        } else {
          skippedCount++;
          
          // Log first few skipped items for debugging
          if (skippedCount <= 5) {
            console.log(`‚ö†Ô∏è DEBUG: Skipped row ${index + 1}: materialCode="${materialCode}", stock="${stock}"`);
          }
        }
      });
      
      // Save file info to Firebase
      await this.saveLinkQFileToFirebase(fileName, data.length, processedCount, skippedCount);
      
      this.isLinkQDataLoaded = true;
      console.log(`‚úÖ Processed ${processedCount} unique LinkQ items, skipped ${skippedCount} rows, found ${duplicateCount} duplicates`);
      console.log(`üîÑ New LinkQ data has completely replaced old data and saved to Firebase`);
      
      // Log some sample data for verification
      if (this.linkQData.size > 0) {
        const sampleItems = Array.from(this.linkQData.entries()).slice(0, 5);
        console.log('üîç DEBUG: Sample processed items:', sampleItems);
      }
    } catch (error) {
      console.error('‚ùå Error processing LinkQ data:', error);
      throw error;
    }
  }

  // Update stock comparison between current system and LinkQ
  private updateStockComparison(): void {
    console.log('üîç Starting stock comparison update...');
    console.log(`üìä LinkQ data size: ${this.linkQData.size}`);
    
    let updatedCount = 0;
    let differenceCount = 0;
    
    this.inventoryItems.forEach(item => {
      const linkQStock = this.linkQData.get(item.materialCode);
      
      // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu LinkQ
      if (linkQStock !== undefined) {
        // üîß L√ÄM TR√íN S·ªê: L√†m tr√≤n s·ªë t·ªìn kho hi·ªán t·∫°i th√†nh s·ªë ch·∫µn
        const roundedCurrentStock = Math.round(item.currentStock);
        const roundedLinkQStock = Math.round(linkQStock);
        
        item.linkQStock = roundedLinkQStock;
        item.stockDifference = roundedCurrentStock - roundedLinkQStock;
        
        // üîß S·ª¨A L·ªñI SO S√ÅNH: Ch·ªâ t√≠nh l·ªách khi ch√™nh l·ªách >= 1 ho·∫∑c <= -1
        // B·ªè qua c√°c ch√™nh l·ªách nh·ªè t·ª´ -0.99 ƒë·∫øn 0.99
        const absDifference = Math.abs(item.stockDifference);
        item.hasDifference = absDifference > 1;
        
        if (item.hasDifference) {
          differenceCount++;
        }
        
        updatedCount++;
        
        // Log debug cho m·ªôt s·ªë items ƒë·∫ßu ti√™n
        if (updatedCount <= 5) {
          console.log(`üîç ${item.materialCode}: Current=${item.currentStock}‚Üí${roundedCurrentStock}, LinkQ=${linkQStock}‚Üí${roundedLinkQStock}, Diff=${item.stockDifference}, HasDiff=${item.hasDifference}`);
        }
      } else {
        // Kh√¥ng c√≥ d·ªØ li·ªáu LinkQ
        item.linkQStock = undefined;
        item.stockDifference = undefined;
        item.hasDifference = undefined;
      }
    });
    
    console.log(`‚úÖ Stock comparison updated: ${updatedCount} items processed, ${differenceCount} items have differences`);
    
    // üîß S·ª¨A L·ªñI: KH√îNG g·ªçi applyFilters() ·ªü ƒë√¢y ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu LinkQ
    // this.applyFilters(); // Commented out to prevent data loss
  }

  // Update stock comparison silently without triggering page reload
  private updateStockComparisonSilently(): void {
    console.log('üîç Starting silent stock comparison update...');
    console.log(`üìä LinkQ data size: ${this.linkQData.size}`);
    
    // üîß DEBUG: Ki·ªÉm tra LinkQ data
    if (this.linkQData.size === 0) {
      console.log('‚ö†Ô∏è WARNING: LinkQ data is empty! This means no LinkQ data was loaded.');
      console.log('üîç Checking if LinkQ data exists in Firebase...');
      return;
    }
    
    // Debug: Log first few LinkQ entries
    const linkQEntries = Array.from(this.linkQData.entries()).slice(0, 5);
    console.log('üîç DEBUG: First few LinkQ entries:', linkQEntries);
    
    let updatedCount = 0;
    let differenceCount = 0;
    
    // Update both inventoryItems and filteredItems to maintain consistency
    [this.inventoryItems, this.filteredItems].forEach(itemsArray => {
      itemsArray.forEach(item => {
        const linkQStock = this.linkQData.get(item.materialCode);
        
        // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu LinkQ
        if (linkQStock !== undefined) {
          // üîß L√ÄM TR√íN S·ªê: L√†m tr√≤n s·ªë t·ªìn kho hi·ªán t·∫°i th√†nh s·ªë ch·∫µn
          const roundedCurrentStock = Math.round(item.currentStock);
          const roundedLinkQStock = Math.round(linkQStock);
          
          item.linkQStock = roundedLinkQStock;
          item.stockDifference = roundedCurrentStock - roundedLinkQStock;
          
          // Ch·ªâ t√≠nh l·ªách khi ch√™nh l·ªách >= 1 ho·∫∑c <= -1
          const absDifference = Math.abs(item.stockDifference);
          item.hasDifference = absDifference > 1;
          
          if (item.hasDifference) {
            differenceCount++;
          }
          
          updatedCount++;
        } else {
          // Kh√¥ng c√≥ d·ªØ li·ªáu LinkQ
          item.linkQStock = undefined;
          item.stockDifference = undefined;
          item.hasDifference = undefined;
        }
      });
    });
    
    console.log(`‚úÖ Silent stock comparison updated: ${updatedCount} items processed, ${differenceCount} items have differences`);
    
    // Force change detection without reloading data
    this.cdr.detectChanges();
  }

  // Get status badge class
  getStatusBadgeClass(item: InventoryOverviewItem): string {
    return item.isNegative ? 'status-negative' : 'status-ok';
  }

  // Get status text
  getStatusText(item: InventoryOverviewItem): string {
    return item.isNegative ? '√Çm' : 'OK';
  }

  // Track by function for ngFor performance
  trackByItem(index: number, item: InventoryOverviewItem): string {
    return item.id;
  }

  // Debug method
  debugComponent(): void {
    console.log('üîç === DEBUG COMPONENT STATE ===');
    console.log('hasAccess:', this.hasAccess);
    console.log('isLoading:', this.isLoading);
    console.log('inventoryItems.length:', this.inventoryItems.length);
    console.log('filteredItems.length:', this.filteredItems.length);
    console.log('showOnlyNegativeStock:', this.showOnlyNegativeStock);
    console.log('searchTerm:', this.searchTerm);
    console.log('groupByType:', this.groupByType);
    console.log('isGroupByDropdownOpen:', this.isGroupByDropdownOpen);
    console.log('isMoreActionsDropdownOpen:', this.isMoreActionsDropdownOpen);
    console.log('currentPage:', this.currentPage);
    console.log('totalPages:', this.totalPages);
    console.log('negativeStockCount:', this.negativeStockCount);
    console.log('totalItemsCount:', this.totalItemsCount);
    
    // üîç DEBUG LinkQ data
    console.log('üîç === LINKQ DEBUG ===');
    console.log('isLinkQDataLoaded:', this.isLinkQDataLoaded);
    console.log('linkQData.size:', this.linkQData.size);
    console.log('currentLinkQFileId:', this.currentLinkQFileId);
    
    if (this.inventoryItems.length > 0) {
      console.log('First 3 items:', this.inventoryItems.slice(0, 3));
      
      // Ki·ªÉm tra d·ªØ li·ªáu LinkQ trong items
      const itemsWithLinkQ = this.inventoryItems.filter(item => item.linkQStock !== undefined);
      console.log(`Items with LinkQ data: ${itemsWithLinkQ.length}`);
      
      if (itemsWithLinkQ.length > 0) {
        console.log('Sample items with LinkQ:', itemsWithLinkQ.slice(0, 3));
      }
      
      // Ki·ªÉm tra items c√≥ difference
      const itemsWithDifference = this.inventoryItems.filter(item => item.hasDifference);
      console.log(`Items with differences: ${itemsWithDifference.length}`);
      
      if (itemsWithDifference.length > 0) {
        console.log('Sample items with differences:', itemsWithDifference.slice(0, 3));
      }
    }
    
    console.log('=== END DEBUG ===');
  }

  // Load LinkQ file history from Firebase
  private async loadLinkQFileHistory(): Promise<void> {
    try {
      console.log('üì• Loading LinkQ file history...');
      const snapshot = await this.firestore.collection('linkQFiles').ref.orderBy('uploadDate', 'desc').limit(10).get();
      this.linkQFiles = snapshot.docs.map(doc => {
        const data = doc.data() as any;
        return {
          id: doc.id,
          fileName: data.fileName || '',
          uploadDate: data.uploadDate?.toDate() || new Date(),
          totalItems: data.totalItems || 0,
          processedItems: data.processedItems || 0,
          skippedItems: data.skippedItems || 0,
          userId: data.userId || '',
          // Add actual LinkQ data storage
          linkQData: data.linkQData || {}
        } as LinkQFileInfo;
      });
      console.log(`‚úÖ Loaded ${this.linkQFiles.length} LinkQ file history items.`);
      
      // Auto-load the most recent LinkQ data if available
      if (this.linkQFiles.length > 0) {
        await this.autoLoadMostRecentLinkQData();
      }
    } catch (error) {
      console.error('‚ùå Error loading LinkQ file history:', error);
      this.linkQFiles = []; // Clear history on error
    }
  }

  // Auto-load the most recent LinkQ data
  private async autoLoadMostRecentLinkQData(): Promise<void> {
    try {
      const mostRecentFile = this.linkQFiles[0]; // First item is most recent due to orderBy desc
      
      if (mostRecentFile.linkQData && Object.keys(mostRecentFile.linkQData).length > 0) {
        console.log(`üîÑ Auto-loading most recent LinkQ data from: ${mostRecentFile.fileName}`);
        console.log(`üîç DEBUG: LinkQ data keys count: ${Object.keys(mostRecentFile.linkQData).length}`);
        
        // Restore LinkQ data
        this.linkQData.clear();
        Object.entries(mostRecentFile.linkQData).forEach(([materialCode, stock]) => {
          this.linkQData.set(materialCode, stock as number);
        });
        
        console.log(`üîç DEBUG: Loaded ${this.linkQData.size} LinkQ items into memory`);
        
        // Set as current file
        this.currentLinkQFileId = mostRecentFile.id;
        
        // Mark as loaded
        this.isLinkQDataLoaded = true;
        
        // Update stock comparison silently to avoid page reload
        this.updateStockComparisonSilently();
        
        console.log(`‚úÖ Auto-loaded ${this.linkQData.size} LinkQ items from ${mostRecentFile.fileName}`);
        console.log(`üìä Current file: ${mostRecentFile.fileName} (${mostRecentFile.processedItems} items)`);
      } else {
        console.log('‚ö†Ô∏è Most recent file has no LinkQ data to restore');
        console.log(`üîç DEBUG: mostRecentFile.linkQData:`, mostRecentFile.linkQData);
        console.log(`üîç DEBUG: Object.keys(mostRecentFile.linkQData):`, Object.keys(mostRecentFile.linkQData || {}));
      }
    } catch (error) {
      console.error('‚ùå Error auto-loading most recent LinkQ data:', error);
    }
  }

  // Save LinkQ file info to Firebase
  private async saveLinkQFileToFirebase(fileName: string, totalItems: number, processedItems: number, skippedItems: number): Promise<void> {
    try {
      console.log('üì§ Saving LinkQ file info to Firebase...');
      const newDocRef = await this.firestore.collection('linkQFiles').add({
        fileName: fileName,
        uploadDate: new Date(),
        totalItems: totalItems,
        processedItems: processedItems,
        skippedItems: skippedItems,
        userId: 'current_user_id', // Replace with actual user ID
        // Add actual LinkQ data storage
        linkQData: Object.fromEntries(this.linkQData)
      });
      
      // Set as current file
      this.currentLinkQFileId = newDocRef.id;
      
      // Reload file history
      await this.loadLinkQFileHistory();
      
      console.log(`‚úÖ File info saved with ID: ${newDocRef.id}`);
    } catch (error) {
      console.error('‚ùå Error saving LinkQ file info to Firebase:', error);
      throw error;
    }
  }

  // Load LinkQ data from saved file
  async loadLinkQFileData(fileId: string): Promise<void> {
    try {
      console.log(`üì• Loading LinkQ data from file ID: ${fileId}`);
      
      // Find the file in our loaded history
      const fileInfo = this.linkQFiles.find(file => file.id === fileId);
      if (!fileInfo) {
        alert('‚ùå File kh√¥ng t·ªìn t·∫°i trong l·ªãch s·ª≠!');
        return;
      }
      
      // Set as current file
      this.currentLinkQFileId = fileId;
      
      if (fileInfo.linkQData && Object.keys(fileInfo.linkQData).length > 0) {
        // Restore LinkQ data
        this.linkQData.clear();
        Object.entries(fileInfo.linkQData).forEach(([materialCode, stock]) => {
          this.linkQData.set(materialCode, stock as number);
        });
        
        // Mark as loaded
        this.isLinkQDataLoaded = true;
        
        // Update stock comparison WITHOUT reloading the page
        this.updateStockComparisonSilently();
        
        // Show success message
        alert(`‚úÖ ƒê√£ load l·∫°i d·ªØ li·ªáu LinkQ t·ª´ file: ${fileInfo.fileName}\n\nüìä Th√¥ng tin file:\n‚Ä¢ T·ªïng items: ${fileInfo.totalItems}\n‚Ä¢ X·ª≠ l√Ω th√†nh c√¥ng: ${fileInfo.processedItems}\n‚Ä¢ B·ªè qua: ${fileInfo.skippedItems}\n‚Ä¢ Ng√†y upload: ${fileInfo.uploadDate.toLocaleDateString('vi-VN')}\n\nüîÑ ƒê√£ kh√¥i ph·ª•c ${this.linkQData.size} m√£ h√†ng ƒë·ªÉ so s√°nh`);
        
        console.log(`‚úÖ LinkQ data restored from ${fileInfo.fileName}: ${this.linkQData.size} items`);
      } else {
        alert(`‚ö†Ô∏è File ${fileInfo.fileName} kh√¥ng c√≥ d·ªØ li·ªáu LinkQ ƒë·ªÉ kh√¥i ph·ª•c!`);
        console.log('‚ö†Ô∏è File has no LinkQ data to restore');
      }
      
    } catch (error) {
      console.error('‚ùå Error loading LinkQ file data:', error);
      alert('‚ùå L·ªói khi load d·ªØ li·ªáu file: ' + error.message);
    }
  }

  // Track by function for file history
  trackByFile(index: number, file: LinkQFileInfo): string {
    return file.id;
  }

  // Delete old LinkQ files from Firebase
  private async deleteOldLinkQFiles(): Promise<void> {
    try {
      console.log('üóëÔ∏è Deleting old LinkQ files...');
      const snapshot = await this.firestore.collection('linkQFiles').ref.get();
      
      if (snapshot.size > 0) {
        const deletePromises = snapshot.docs.map(doc => doc.ref.delete());
        await Promise.all(deletePromises);
        console.log(`üóëÔ∏è Deleted ${snapshot.size} old LinkQ files`);
      } else {
        console.log('‚ÑπÔ∏è No old LinkQ files to delete');
      }
    } catch (error) {
      console.error('‚ùå Error deleting old LinkQ files:', error);
      // Don't throw error, continue with new file import
    }
  }

  // üîç Ph√¢n t√≠ch duplicate trong file Excel
  private analyzeExcelDuplicates(data: any[]): void {
    console.log('üîç Analyzing Excel file for duplicates...');
    
    const materialCodeCount = new Map<string, { count: number, rows: number[] }>();
    
    data.forEach((row, index) => {
      const materialCode = row['M√£ h√†ng'] || 
                          row['materialCode'] || 
                          row['M√£'] || 
                          row['Code'] || 
                          row['Material'] || 
                          row['Item'] ||
                          row['Part'] ||
                          row['SKU'] ||
                          row['Product'] ||
                          row['Item Code'] ||
                          row['Part Number'] ||
                          row['Material Code'] ||
                          row['Product Code'] ||
                          '';
      
      if (materialCode && materialCode.toString().trim() !== '') {
        const trimmedCode = materialCode.toString().trim();
        
        if (materialCodeCount.has(trimmedCode)) {
          const existing = materialCodeCount.get(trimmedCode)!;
          existing.count++;
          existing.rows.push(index + 1);
        } else {
          materialCodeCount.set(trimmedCode, { count: 1, rows: [index + 1] });
        }
      }
    });
    
    // T√¨m v√† b√°o c√°o duplicates
    const duplicates = Array.from(materialCodeCount.entries())
      .filter(([code, info]) => info.count > 1)
      .sort((a, b) => b[1].count - a[1].count);
    
    if (duplicates.length > 0) {
      console.log(`‚ö†Ô∏è FOUND ${duplicates.length} DUPLICATE MATERIAL CODES in Excel file:`);
      duplicates.forEach(([code, info]) => {
        console.log(`  üìã "${code}": appears ${info.count} times in rows ${info.rows.join(', ')}`);
      });
    } else {
      console.log('‚úÖ No duplicate material codes found in Excel file');
    }
  }

  // üîç Ki·ªÉm tra m√£ h√†ng h·ª£p l·ªá (lo·∫°i b·ªè d·ªØ li·ªáu scan sai)
  private isValidMaterialCode(materialCode: string): boolean {
    if (!materialCode || materialCode.trim() === '') {
      return false;
    }
    
    // Lo·∫°i b·ªè m√£ h√†ng ch·ªâ c√≥ s·ªë ƒë∆°n gi·∫£n (nh∆∞ "25", "123", "999")
    if (/^\d{1,3}$/.test(materialCode.trim())) {
      return false;
    }
    
    // Lo·∫°i b·ªè m√£ h√†ng qu√° ng·∫Øn (d∆∞·ªõi 4 k√Ω t·ª±)
    if (materialCode.trim().length < 4) {
      return false;
    }
    
    // Lo·∫°i b·ªè m√£ h√†ng ch·ªâ c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
    if (/^[^a-zA-Z0-9]*$/.test(materialCode.trim())) {
      return false;
    }
    
    return true;
  }

  // üîç Ki·ªÉm tra PO h·ª£p l·ªá
  private isValidPONumber(poNumber: string): boolean {
    if (!poNumber || poNumber.trim() === '') {
      return false;
    }
    
    // Lo·∫°i b·ªè PO ch·ªâ c√≥ s·ªë ƒë∆°n gi·∫£n
    if (/^\d{1,5}$/.test(poNumber.trim())) {
      return false;
    }
    
    // Lo·∫°i b·ªè PO qu√° ng·∫Øn (d∆∞·ªõi 3 k√Ω t·ª±)
    if (poNumber.trim().length < 3) {
      return false;
    }
    
    // Lo·∫°i b·ªè PO ch·ªâ c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
    if (/^[^a-zA-Z0-9]*$/.test(poNumber.trim())) {
      return false;
    }
    
    return true;
  }
}
