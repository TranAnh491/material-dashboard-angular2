import { Component, OnInit, OnDestroy, AfterViewInit, HostListener, ChangeDetectorRef } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import * as XLSX from 'xlsx';
import * as QRCode from 'qrcode';
import { Html5Qrcode } from 'html5-qrcode';
import { MatDialog } from '@angular/material/dialog';
import { TabPermissionService } from '../../services/tab-permission.service';
import { FactoryAccessService } from '../../services/factory-access.service';
import { ExcelImportService } from '../../services/excel-import.service';
import { ImportProgressDialogComponent } from '../../components/import-progress-dialog/import-progress-dialog.component';
import { QRScannerModalComponent, QRScannerData } from '../../components/qr-scanner-modal/qr-scanner-modal.component';

export interface InventoryMaterial {
  id?: string;
  factory?: string;
  importDate: Date;
  receivedDate?: Date;
  batchNumber: string;
  materialCode: string;
  materialName?: string;
  poNumber: string;
  openingStock: number | null; // T·ªìn ƒë·∫ßu - nh·∫≠p tay ƒë∆∞·ª£c, c√≥ th·ªÉ null
  quantity: number;
  unit: string;
  exported?: number;
  xt?: number; // S·ªë l∆∞·ª£ng c·∫ßn xu·∫•t (nh·∫≠p tay)
  stock?: number;
  location: string;
  type: string;
  expiryDate: Date;
  qualityCheck: boolean;
  isReceived: boolean;
  notes: string;
  rollsOrBags: string;
  supplier: string;
  remarks: string;
  standardPacking?: number;
  isCompleted: boolean;
  isDuplicate?: boolean;
  importStatus?: string;

  createdAt?: Date;
  updatedAt?: Date;
}

@Component({
  selector: 'app-materials-asm1',
  templateUrl: './materials-asm1.component.html',
  styleUrls: ['./materials-asm1.component.scss']
})
export class MaterialsASM1Component implements OnInit, OnDestroy, AfterViewInit {
  // Fixed factory for ASM1
  readonly FACTORY = 'ASM1';
  
  // üîß LOGIC M·ªöI: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t t·ª´ Outbound theo Material + PO
  // - M·ªói d√≤ng Inventory ƒë∆∞·ª£c c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t D·ª∞A TR√äN Material + PO
  // - Outbound RM1 scan/nh·∫≠p: Material + PO (kh√¥ng c√≤n v·ªã tr√≠)
  // - H·ªá th·ªëng s·∫Ω t√¨m t·∫•t c·∫£ outbound records c√≥ c√πng Material + PO v√† c·ªông d·ªìn
  // - KH√îNG c√≤n b·ªã l·ªói s·ªë √¢m sai khi search
  
  // Data properties
  inventoryMaterials: InventoryMaterial[] = [];
  filteredInventory: InventoryMaterial[] = [];
  
  // Loading state
  isLoading = false;
  isCatalogLoading = false;
  
  // Consolidation status
  consolidationMessage = '';
  showConsolidationMessage = false;
  
  // Catalog cache for faster access
  private catalogCache = new Map<string, any>();
  public catalogLoaded = false;
  
  // Search and filter
  searchTerm = '';
  searchType: 'material' | 'po' | 'location' = 'material';
  private searchSubject = new Subject<string>();
  
  // Negative stock tracking
  private negativeStockSubject = new BehaviorSubject<number>(0);
  public negativeStockCount$ = this.negativeStockSubject.asObservable();
  
  // Total stock tracking
  private totalStockSubject = new BehaviorSubject<number>(0);
  public totalStockCount$ = this.totalStockSubject.asObservable();
  
  // Negative stock filter state
  showOnlyNegativeStock = false;
  
  // Export column lock state
  isExportColumnUnlocked = false;
  
  // Dropdown state
  isDropdownOpen = false;
  
  // Show completed items
  // showCompleted = true; // Removed - replaced with Reset function
  
  // Lifecycle
  private destroy$ = new Subject<void>();
  
  // QR Scanner
  private html5QrCode: Html5Qrcode | null = null;
  isScanning = false;
  
  // Permissions
  canView = false;
  canEdit = false;
  canExport = false;
  canDelete = false;
  // canEditHSD = false; // Removed - HSD column deleted

  constructor(
    private firestore: AngularFirestore,
    private afAuth: AngularFireAuth,
    private cdr: ChangeDetectorRef,
    private tabPermissionService: TabPermissionService,
    private factoryAccessService: FactoryAccessService,
    private excelImportService: ExcelImportService,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    console.log('üîç DEBUG: ngOnInit - Starting component initialization');
    
    // Load catalog first for material names mapping
    this.loadCatalogFromFirebase().then(() => {
      console.log('üìö ASM1 Catalog loaded, inventory ready for search');
    });
    this.loadPermissions();
    
    // Load inventory data and setup search after data is loaded
    this.loadInventoryAndSetupSearch();
    
    // Initialize negative stock count and total stock count
    this.updateNegativeStockCount();
    
    console.log('‚úÖ ASM1 Materials component initialized - Search setup will happen after data loads');
    console.log('üîç DEBUG: ngOnInit - Component initialization completed');
  }

  ngAfterViewInit(): void {
    setTimeout(() => {
      this.autoResizeNotesColumn();
    }, 1000);
  }

  ngOnDestroy(): void {
    this.stopScanning();
    this.destroy$.next();
    this.destroy$.complete();
  }

  // Setup debounced search for better performance
  private setupDebouncedSearch(): void {
    this.searchSubject.pipe(
      debounceTime(2000), // ƒê·ª£i 2 gi√¢y sau khi user ng·ª´ng g√µ
      distinctUntilChanged(),
      takeUntil(this.destroy$)
    ).subscribe(searchTerm => {
      this.performSearch(searchTerm);
    });
  }

  // Load inventory data from Firebase - ONLY ASM1
  async loadInventoryFromFirebase(): Promise<void> {
    console.log('üì¶ Loading ASM1 inventory from Firebase...');
    this.isLoading = true;
    
    this.firestore.collection('inventory-materials', ref => 
      ref.where('factory', '==', this.FACTORY)
    )
      .snapshotChanges()
      .pipe(takeUntil(this.destroy$))
      .subscribe((actions) => {
        this.inventoryMaterials = actions
          .map(action => {
            const data = action.payload.doc.data() as any;
            const id = action.payload.doc.id;
            const material = {
              id: id,
              ...data,
              factory: this.FACTORY, // Force ASM1
              importDate: data.importDate ? new Date(data.importDate.seconds * 1000) : new Date(),
              receivedDate: data.receivedDate ? new Date(data.receivedDate.seconds * 1000) : new Date(),
              expiryDate: data.expiryDate ? new Date(data.expiryDate.seconds * 1000) : new Date(),
              openingStock: data.openingStock || null, // Initialize openingStock field - ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥
              xt: data.xt || 0 // Initialize XT field for old materials
            };
            
            // Apply catalog data if available
            if (this.catalogLoaded && this.catalogCache.has(material.materialCode)) {
              const catalogItem = this.catalogCache.get(material.materialCode)!;
              material.materialName = catalogItem.materialName;
              material.unit = catalogItem.unit;
            }
            
            return material;
          })
          .filter(material => material.factory === this.FACTORY); // Double check ASM1 only

        // Set filteredInventory to show all loaded items initially
        this.filteredInventory = [...this.inventoryMaterials];
        
        // G·ªôp d√≤ng tr√πng l·∫∑p TR∆Ø·ªöC KHI x·ª≠ l√Ω outbound
        console.log('üîÑ Consolidating duplicate materials...');
        
        // Ki·ªÉm tra xem c√≥ d√≤ng tr√πng l·∫∑p kh√¥ng
        const materialPoMap = new Map<string, InventoryMaterial[]>();
        this.inventoryMaterials.forEach(material => {
          const key = `${material.materialCode}_${material.poNumber}`;
          if (!materialPoMap.has(key)) {
            materialPoMap.set(key, []);
          }
          materialPoMap.get(key)!.push(material);
        });
        
        const duplicateGroups = Array.from(materialPoMap.values()).filter(group => group.length > 1);
        
        if (duplicateGroups.length > 0) {
          console.log(`‚ö†Ô∏è Found ${duplicateGroups.length} duplicate groups, auto-consolidating...`);
          
          // G·ªôp d√≤ng t·ª± ƒë·ªông khi load to√†n b·ªô inventory
          this.autoConsolidateOnLoad().then(() => {
            // Ti·∫øp t·ª•c x·ª≠ l√Ω sau khi g·ªôp xong
            this.continueAfterConsolidation();
          });
        } else {
          console.log('‚úÖ No duplicate groups found, proceeding with normal flow...');
          // G·ªôp d√≤ng b√¨nh th∆∞·ªùng (ch·ªâ local)
          this.consolidateInventoryData();
          
          // Ti·∫øp t·ª•c x·ª≠ l√Ω
          this.continueAfterConsolidation();
        }
      }, error => {
        console.error('Error loading ASM1 inventory:', error);
        this.isLoading = false;
      });
  }

  // Load inventory and setup search mechanism
  private loadInventoryAndSetupSearch(): void {
    console.log('üì¶ Setting up search mechanism without loading initial data...');
    
    // Don't load any data initially - only setup search
    this.inventoryMaterials = [];
    this.filteredInventory = [];
    
    // Setup search mechanism immediately
    console.log('üîç Setting up search mechanism...');
    this.setupDebouncedSearch();
    console.log('‚úÖ Search mechanism setup completed - No initial data loaded');
  }

  // Load catalog from Firebase
  private async loadCatalogFromFirebase(): Promise<void> {
    this.isCatalogLoading = true;
    console.log('üìã Loading catalog from Firebase...');
    
    try {
      // TH·ª¨ NHI·ªÄU COLLECTION NAMES - ∆ØU TI√äN 'materials' v√¨ c√≥ 8750 documents v·ªõi standardPacking
      let snapshot = null;
      let collectionName = '';
      
      // Th·ª≠ collection 'materials' tr∆∞·ªõc (c√≥ 8750 documents v·ªõi standardPacking field)
      try {
        console.log('üîç Trying collection: materials (priority - has 8750 docs with standardPacking)');
        snapshot = await this.firestore.collection('materials').get().toPromise();
        if (snapshot && !snapshot.empty) {
          collectionName = 'materials';
          console.log('‚úÖ Found catalog data in collection: materials');
          console.log(`üìä Catalog snapshot size: ${snapshot.size}`);
        } else {
          console.log('‚ö†Ô∏è Collection "materials" exists but is empty');
        }
      } catch (e) {
        console.log('‚ùå Collection "materials" not found or error:', e);
      }
      
      // N·∫øu kh√¥ng c√≥, th·ª≠ collection 'catalog' (d·ª± ph√≤ng)
      if (!snapshot || snapshot.empty) {
        try {
          console.log('üîç Trying collection: catalog (fallback)');
          snapshot = await this.firestore.collection('catalog').get().toPromise();
          if (snapshot && !snapshot.empty) {
            collectionName = 'catalog';
            console.log('‚úÖ Found catalog data in collection: catalog');
            console.log(`üìä Catalog snapshot size: ${snapshot.size}`);
          } else {
            console.log('‚ö†Ô∏è Collection "catalog" exists but is empty');
          }
        } catch (e) {
          console.log('‚ùå Collection "catalog" not found or error:', e);
        }
      }
      
      // N·∫øu kh√¥ng c√≥, th·ª≠ 'material-catalog'
      if (!snapshot || snapshot.empty) {
        try {
          console.log('üîç Trying collection: material-catalog');
          snapshot = await this.firestore.collection('material-catalog').get().toPromise();
          if (snapshot && !snapshot.empty) {
            collectionName = 'material-catalog';
            console.log('‚úÖ Found catalog data in collection: material-catalog');
            console.log(`üìä Catalog snapshot size: ${snapshot.size}`);
          } else {
            console.log('‚ö†Ô∏è Collection "material-catalog" exists but is empty');
          }
        } catch (e) {
          console.log('‚ùå Collection "material-catalog" not found or error:', e);
        }
      }
      
      if (snapshot && !snapshot.empty) {
        this.catalogCache.clear();
        
        // Log first few documents to see structure
        console.log('üìÑ Sample catalog documents:');
        snapshot.docs.slice(0, 3).forEach((doc, index) => {
          const data = doc.data() as any;
          console.log(`  ${index + 1}. ${doc.id}:`, {
            materialCode: data.materialCode,
            materialName: data.materialName,
            unit: data.unit,
            standardPacking: data.standardPacking
          });
        });
        
        // Process all documents and add to cache - HANDLE DUPLICATES
        let processedCount = 0;
        let duplicateCount = 0;
        const processedCodes = new Set<string>();
        
        snapshot.forEach(doc => {
          const data = doc.data() as any;
          console.log(`üìù Processing doc ${doc.id}:`, data);
          
          // Ki·ªÉm tra c√°c field c√≥ th·ªÉ c√≥ trong collection 'materials'
          const materialCode = data.materialCode || data.code || data.material_code;
          const materialName = data.materialName || data.name || data.material_name;
          
          if (materialCode && materialName) {
            // Ki·ªÉm tra tr√πng l·∫∑p materialCode
            if (processedCodes.has(materialCode)) {
              duplicateCount++;
              console.log(`‚ö†Ô∏è Duplicate materialCode ${materialCode} found in doc ${doc.id} - skipping`);
              return; // Skip duplicate
            }
            
            const catalogItem = {
              materialCode: materialCode,
              materialName: materialName,
              unit: data.unit || data.unitOfMeasure || 'PCS',
              standardPacking: data.standardPacking || data.packing || data.unitSize || 0
            };
            
            this.catalogCache.set(materialCode, catalogItem);
            processedCodes.add(materialCode); // Mark as processed
            processedCount++;
            console.log(`‚úÖ Added to cache: ${materialCode} ->`, catalogItem);
          } else {
            console.log(`‚ö†Ô∏è Skipping doc ${doc.id} - missing materialCode or materialName:`, {
              materialCode: materialCode,
              materialName: materialName,
              availableFields: Object.keys(data)
            });
          }
        });
        
        console.log(`üìä Duplicate handling: ${duplicateCount} duplicates skipped, ${processedCount} unique items processed`);
        
        this.catalogLoaded = true;
        console.log(`‚úÖ Loaded ${this.catalogCache.size} catalog items from Firebase collection: ${collectionName}`);
        console.log(`üìã Catalog cache keys:`, Array.from(this.catalogCache.keys()));
        console.log(`üìä Processed ${processedCount} documents`);
        
        if (duplicateCount > 0) {
          console.log(`‚ö†Ô∏è WARNING: ${duplicateCount} duplicate materialCodes were skipped to avoid conflicts`);
        }
        
        if (collectionName === 'materials') {
          console.log('üéØ SUCCESS: Catalog loaded from "materials" collection with standardPacking field!');
        }
        
        // Update any existing inventory items with catalog data
        if (this.inventoryMaterials.length > 0) {
          this.inventoryMaterials.forEach(material => {
            if (this.catalogCache.has(material.materialCode)) {
              const catalogItem = this.catalogCache.get(material.materialCode)!;
              material.materialName = catalogItem.materialName;
              material.unit = catalogItem.unit;
              // ‚úÖ C·∫≠p nh·∫≠t standardPacking n·∫øu c√≥
              if (catalogItem.standardPacking) {
                material.standardPacking = catalogItem.standardPacking;
              }
            }
          });
          this.cdr.detectChanges();
        }
      } else {
        console.warn('‚ùå No catalog data found in any collection. Please check Firebase.');
        this.catalogLoaded = true;
      }
    } catch (error) {
      console.error('‚ùå Error loading catalog from Firebase:', error);
      this.catalogLoaded = true;
    } finally {
      this.isCatalogLoading = false;
    }
  }

  // Apply filters to inventory
  applyFilters(): void {
    // Reset negative stock filter when applying other filters
    this.showOnlyNegativeStock = false;
    
    this.filteredInventory = this.inventoryMaterials.filter(material => {
      // Always filter by ASM1 only
      if (material.factory !== this.FACTORY) {
        return false;
      }

      // Apply search filter based on search type
      if (this.searchTerm) {
        const searchTermLower = this.searchTerm.toLowerCase();
        
        switch (this.searchType) {
          case 'material':
            // Search by material code or name
            if (!material.materialCode?.toLowerCase().includes(searchTermLower) &&
                !material.materialName?.toLowerCase().includes(searchTermLower)) {
              return false;
            }
            break;
            
          case 'po':
            // Search by PO number
            if (!material.poNumber?.toLowerCase().includes(searchTermLower)) {
              return false;
            }
            break;
            
                      case 'location':
              // Search by location
              if (!material.location?.toLowerCase().includes(searchTermLower)) {
                return false;
              }
              break;
        }
      }
      
      return true;
    });

    // Sort by Material Code -> PO (oldest first) - SIMPLE FIFO LOGIC
    this.sortInventoryFIFO();
    
    // Mark duplicates
    this.markDuplicates();
    
    console.log('üîç ASM1 filters applied. Items found:', this.filteredInventory.length);
  }

  // New optimized search method
  onSearchInput(event: any): void {
    let searchTerm = event.target.value;
    console.log('üîç ASM1 Search input:', searchTerm);
    
    // Auto-convert to uppercase (only if different to avoid infinite loop)
    if (searchTerm && searchTerm !== searchTerm.toUpperCase()) {
      searchTerm = searchTerm.toUpperCase();
      // Use setTimeout to avoid infinite loop with ngModel
      setTimeout(() => {
        event.target.value = searchTerm;
        this.searchTerm = searchTerm;
      }, 0);
    }
    
    // Clear results immediately if search is empty
    if (!searchTerm || searchTerm.trim() === '') {
      this.clearSearch();
      return;
    }
    
    // Send to debounced search
    this.searchSubject.next(searchTerm);
  }

  // Handle search input with better uppercase conversion
  onSearchKeyUp(event: any): void {
    const searchTerm = event.target.value;
    
    // Convert to uppercase on key up
    if (searchTerm && searchTerm !== searchTerm.toUpperCase()) {
      event.target.value = searchTerm.toUpperCase();
      this.searchTerm = searchTerm.toUpperCase();
    }
  }

  // Clear search and reset to initial state
  clearSearch(): void {
    this.searchTerm = '';
    this.filteredInventory = [];
    this.inventoryMaterials = [];
    
    // Reset negative stock filter
    this.showOnlyNegativeStock = false;
    
    // Return to initial state - no data displayed
    console.log('üßπ ASM1 Search cleared, returning to initial state (no data displayed)');
  }

  // Change search type
  changeSearchType(type: 'material' | 'po' | 'location'): void {
    this.searchType = type;
    this.searchTerm = ''; // Clear search when changing type
    this.applyFilters(); // Reapply filters
  }

  // Perform search with Search-First approach for ASM1 - IMPROVED VERSION
  private async performSearch(searchTerm: string): Promise<void> {
    if (searchTerm.length === 0) {
      this.filteredInventory = [];
      this.searchTerm = '';
      this.inventoryMaterials = []; // Clear loaded data
      return;
    }
    
    // Ch·ªâ search khi c√≥ √≠t nh·∫•t 3 k√Ω t·ª± ƒë·ªÉ tr√°nh m·∫•t th·ªùi gian
    if (searchTerm.length < 3) {
      this.filteredInventory = [];
      console.log(`‚è∞ ASM1 Search term "${searchTerm}" qu√° ng·∫Øn (c·∫ßn √≠t nh·∫•t 3 k√Ω t·ª±)`);
      return;
    }
    
    this.searchTerm = searchTerm;
    this.isLoading = true;
    
    try {
      console.log(`üîç ASM1 Searching for: "${searchTerm}" - Loading from Firebase...`);
      
      // IMPROVED: Query Firebase v·ªõi nhi·ªÅu ƒëi·ªÅu ki·ªán h∆°n ƒë·ªÉ t√¨m ki·∫øm to√†n di·ªán
      let querySnapshot;
      
      // Th·ª≠ t√¨m ki·∫øm theo materialCode tr∆∞·ªõc (ch√≠nh x√°c nh·∫•t) - ASM1 only
      querySnapshot = await this.firestore.collection('inventory-materials', ref => 
        ref.where('factory', '==', this.FACTORY)
           .where('materialCode', '==', searchTerm)
           .limit(50)
      ).get().toPromise();
      
      // N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m ki·∫øm theo pattern matching
      if (!querySnapshot || querySnapshot.empty) {
        console.log(`üîç ASM1 No exact match for "${searchTerm}", trying pattern search...`);
        
        querySnapshot = await this.firestore.collection('inventory-materials', ref => 
          ref.where('factory', '==', this.FACTORY)
             .where('materialCode', '>=', searchTerm)
             .where('materialCode', '<=', searchTerm + '\uf8ff')
             .limit(100)
        ).get().toPromise();
      }
      
      // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, t√¨m ki·∫øm theo PO number
      if (!querySnapshot || querySnapshot.empty) {
        console.log(`üîç ASM1 No pattern match for "${searchTerm}", trying PO search...`);
        
        querySnapshot = await this.firestore.collection('inventory-materials', ref => 
          ref.where('factory', '==', this.FACTORY)
             .where('poNumber', '>=', searchTerm)
             .where('poNumber', '<=', searchTerm + '\uf8ff')
             .limit(100)
        ).get().toPromise();
      }
      
      if (querySnapshot && !querySnapshot.empty) {
        console.log(`‚úÖ ASM1 Found ${querySnapshot.docs.length} documents from Firebase`);
        
        // Process search results
        this.inventoryMaterials = querySnapshot.docs.map(doc => {
          const data = doc.data() as any;
          const material = {
            id: doc.id,
            ...data,
            factory: this.FACTORY, // Force ASM1
            importDate: data.importDate ? new Date(data.importDate.seconds * 1000) : new Date(),
            receivedDate: data.receivedDate ? new Date(data.receivedDate.seconds * 1000) : new Date(),
            expiryDate: data.expiryDate ? new Date(data.expiryDate.seconds * 1000) : new Date(),
            openingStock: data.openingStock || null, // Initialize openingStock field - ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥
            xt: data.xt || 0 // Initialize XT field for search results
          };
          
          // Apply catalog data if available
          if (this.catalogLoaded && this.catalogCache.has(material.materialCode)) {
            const catalogItem = this.catalogCache.get(material.materialCode)!;
            material.materialName = catalogItem.materialName;
            material.unit = catalogItem.unit;
          }
          
          return material;
        });
        
        // IMPROVED: Kh√¥ng c·∫ßn filter th√™m n·ªØa v√¨ ƒë√£ query ch√≠nh x√°c t·ª´ Firebase
        this.filteredInventory = [...this.inventoryMaterials];
        
        // KH√îNG g·ªôp d√≤ng khi search - ch·ªâ g·ªôp khi b·∫•m n√∫t "G·ªôp d√≤ng tr√πng l·∫∑p"
        // this.consolidateInventoryData();
        
        // S·∫Øp x·∫øp FIFO: Material Code -> PO (oldest first)
        this.sortInventoryFIFO();
        
        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t t·ª´ outbound cho k·∫øt qu·∫£ t√¨m ki·∫øm
        this.autoUpdateSearchResultsExportedFromOutbound();
        
        console.log(`‚úÖ ASM1 Search completed: ${this.filteredInventory.length} results from ${this.inventoryMaterials.length} loaded items`);
        
        // Debug: Log t·∫•t c·∫£ material codes t√¨m ƒë∆∞·ª£c
        const materialCodes = this.filteredInventory.map(item => item.materialCode);
        console.log(`üîç ASM1 Found material codes:`, materialCodes);
        
      } else {
        // No results found
        this.inventoryMaterials = [];
        this.filteredInventory = [];
        console.log(`üîç ASM1 No results found for: "${searchTerm}" after trying all search methods`);
      }
      
    } catch (error) {
      console.error('‚ùå ASM1 Error during search:', error);
      this.filteredInventory = [];
    } finally {
      this.isLoading = false;
    }
  }

  // Track by function for ngFor optimization
  trackByFn(index: number, item: any): any {
    return item.id || index;
  }

  // Compare material codes for FIFO sorting
  private compareMaterialCodesFIFO(codeA: string, codeB: string): number {
    if (!codeA || !codeB) return 0;
    
    // Extract first letter and 6-digit number
    const parseCode = (code: string) => {
      const match = code.match(/^([ABR])(\d{6})/);
      if (!match) return { letter: 'Z', number: 999999 }; // Put invalid codes at end
      return { 
        letter: match[1], 
        number: parseInt(match[2], 10) 
      };
    };
    
    const parsedA = parseCode(codeA);
    const parsedB = parseCode(codeB);
    
    // Priority order: A -> B -> R
    const letterOrder = { 'A': 1, 'B': 2, 'R': 3, 'Z': 999 };
    
    // Compare by letter first
    const letterComparison = letterOrder[parsedA.letter] - letterOrder[parsedB.letter];
    if (letterComparison !== 0) {
      return letterComparison;
    }
    
    // If same letter, compare by number (ascending order for FIFO)
    return parsedA.number - parsedB.number;
  }

  // Sort inventory by FIFO: Material Code -> PO (oldest first)
  private sortInventoryFIFO(): void {
    if (!this.filteredInventory || this.filteredInventory.length === 0) return;
    
    console.log('üîÑ Sorting inventory by FIFO: Material Code -> PO (oldest first)...');
    
    this.filteredInventory.sort((a, b) => {
      // First compare by Material Code (group same materials together)
      const materialComparison = this.compareMaterialCodesFIFO(a.materialCode, b.materialCode);
      if (materialComparison !== 0) {
        return materialComparison;
      }
      
      // If same material code, sort by PO: Year -> Month -> Sequence (oldest first)
      return this.comparePOFIFO(a.poNumber, b.poNumber);
    });
    

    
    console.log('‚úÖ Inventory sorted by FIFO successfully');
    
    // Update negative stock count after sorting
    this.updateNegativeStockCount();
  }



  // Compare PO numbers for FIFO sorting (older first) - FIXED LOGIC
  private comparePOFIFO(poA: string, poB: string): number {
    if (!poA || !poB) return 0;
    
    // Extract mmyy/xxxx pattern from PO
    const parsePO = (po: string) => {
      // Look for mmyy/xxxx pattern at the end of PO
      const match = po.match(/(\d{2})(\d{2})\/(\d{4})$/);
      if (!match) return { month: 99, year: 99, sequence: 9999 }; // Invalid PO goes to end
      
      const month = parseInt(match[1], 10);
      const year = parseInt(match[2], 10);
      const sequence = parseInt(match[3], 10);
      
      return { month, year, sequence };
    };
    
    const parsedA = parsePO(poA);
    const parsedB = parsePO(poB);
    
    // FIFO: Earlier year first (21 before 25)
    if (parsedA.year !== parsedB.year) {
      return parsedA.year - parsedB.year;
    }
    
    // If same year, earlier month first (02 before 03) 
    if (parsedA.month !== parsedB.month) {
      return parsedA.month - parsedB.month;
    }
    
    // If same month/year, lower sequence first (0007 before 0165)
    return parsedA.sequence - parsedB.sequence;
  }

  // Status helper methods
  getStatusClass(item: InventoryMaterial): string {
    if (item.isCompleted) return 'status-completed';
    if (item.isDuplicate) return 'status-duplicate';
    if (item.importStatus === 'Import') return 'status-import';
    return 'status-active';
  }

  getStatusText(item: InventoryMaterial): string {
    if (item.isCompleted) return 'Ho√†n th√†nh';
    if (item.isDuplicate) return 'Tr√πng l·∫∑p';
    if (item.importStatus === 'Import') return 'Import';
    return 'Ho·∫°t ƒë·ªông';
  }

  getExpiryDateText(expiryDate: Date): string {
    if (!expiryDate) return 'N/A';
    
    const today = new Date();
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'H·∫øt h·∫°n';
    if (diffDays <= 30) return `${diffDays}d`;
    if (diffDays <= 90) return `${Math.ceil(diffDays/30)}m`;
    return `${Math.ceil(diffDays/365)}y`;
  }

  // Check if location is IQC
  isIQCLocation(location: string): boolean {
    return location && location.toUpperCase() === 'IQC';
  }

  // Mark duplicates within ASM1
  markDuplicates(): void {
    const poMap = new Map<string, InventoryMaterial[]>();
    
    // Group materials by PO
    this.filteredInventory.forEach(material => {
      if (!poMap.has(material.poNumber)) {
        poMap.set(material.poNumber, []);
      }
      poMap.get(material.poNumber)!.push(material);
    });
    
    // Mark duplicates
    poMap.forEach((materials, po) => {
      if (materials.length > 1) {
        materials.forEach(material => {
          material.isDuplicate = true;
        });
      } else {
        materials[0].isDuplicate = false;
      }
    });
    
    // Update negative stock count after marking duplicates
    this.updateNegativeStockCount();
  }

  // Consolidate inventory data by material code + PO (g·ªôp t·∫•t c·∫£ d√≤ng c√≥ c√πng m√£ h√†ng v√† PO)
  consolidateInventoryData(): void {
    try {
      console.log('üîÑ Starting inventory data consolidation by Material + PO...');
      
      if (!this.inventoryMaterials || this.inventoryMaterials.length === 0) {
        console.log('‚ö†Ô∏è No inventory materials to consolidate');
        return;
      }
      
      console.log(`üìä Input: ${this.inventoryMaterials.length} materials to process`);
    
    // Group materials by Material + PO
    const materialPoMap = new Map<string, InventoryMaterial[]>();
    
    this.inventoryMaterials.forEach(material => {
      const key = `${material.materialCode}_${material.poNumber}`;
      
      if (!materialPoMap.has(key)) {
        materialPoMap.set(key, []);
      }
      materialPoMap.get(key)!.push(material);
    });
    
    console.log(`üìä Found ${materialPoMap.size} unique Material+PO combinations from ${this.inventoryMaterials.length} total items`);
    
    // Final consolidation map
    const finalConsolidatedMap = new Map<string, InventoryMaterial>();
    
    materialPoMap.forEach((materials, materialPoKey) => {
      if (materials.length === 1) {
        // Single item - keep as is
        const material = materials[0];
        finalConsolidatedMap.set(materialPoKey, material);
        console.log(`‚úÖ Single item: ${material.materialCode} - PO ${material.poNumber} - Location: ${material.location}`);
      } else {
        // Multiple items - merge into one row
        console.log(`üîÑ Consolidating ${materials.length} items for ${materialPoKey}`);
        
        const baseMaterial = { ...materials[0] };
        
        // Combine quantities
        const totalOpeningStock = materials.reduce((sum, m) => {
          const stock = m.openingStock !== null ? m.openingStock : 0;
          return sum + stock;
        }, 0);
        baseMaterial.openingStock = totalOpeningStock > 0 ? totalOpeningStock : null;
        baseMaterial.quantity = materials.reduce((sum, m) => sum + m.quantity, 0);
        baseMaterial.stock = materials.reduce((sum, m) => sum + (m.stock || 0), 0);
        baseMaterial.exported = materials.reduce((sum, m) => sum + (m.exported || 0), 0);
        baseMaterial.xt = materials.reduce((sum, m) => sum + (m.xt || 0), 0);
        
        // Combine location field - g·ªôp t·∫•t c·∫£ v·ªã tr√≠ kh√°c nhau
        const uniqueLocations = [...new Set(materials.map(m => m.location).filter(loc => loc))];
        baseMaterial.location = uniqueLocations.join('; ');
        
        // Combine type field - g·ªôp t·∫•t c·∫£ lo·∫°i h√¨nh kh√°c nhau
        const uniqueTypes = [...new Set(materials.map(m => m.type).filter(type => type))];
        baseMaterial.type = uniqueTypes.join('; ');
        
        // Keep earliest import date and latest expiry date
        baseMaterial.importDate = new Date(Math.min(...materials.map(m => m.importDate.getTime())));
        baseMaterial.expiryDate = new Date(Math.max(...materials.map(m => m.expiryDate.getTime())));
        
        // Merge other fields
        baseMaterial.notes = materials.map(m => m.notes).filter(n => n).join('; ');
        baseMaterial.remarks = materials.map(m => m.remarks).filter(r => r).join('; ');
        baseMaterial.supplier = materials.map(m => m.supplier).filter(s => s).join('; ');
        baseMaterial.rollsOrBags = materials.map(m => m.rollsOrBags).filter(r => r).join('; ');
        
        finalConsolidatedMap.set(materialPoKey, baseMaterial);
        
        console.log(`‚úÖ Consolidated: ${baseMaterial.materialCode} - PO: ${baseMaterial.poNumber}`);
        console.log(`  üìç Locations: ${baseMaterial.location}`);
        console.log(`  üè∑Ô∏è Types: ${baseMaterial.type}`);
        console.log(`  üì¶ Total Quantity: ${baseMaterial.quantity}`);
        console.log(`  üì§ Total Exported: ${baseMaterial.exported}`);
      }
    });
    
    // Update the inventory data
    const originalCount = this.inventoryMaterials.length;
    this.inventoryMaterials = Array.from(finalConsolidatedMap.values());
    this.filteredInventory = [...this.inventoryMaterials];
    
    // S·∫Øp x·∫øp FIFO sau khi g·ªôp d·ªØ li·ªáu
    this.sortInventoryFIFO();
    
    console.log(`‚úÖ Inventory consolidation completed: ${originalCount} ‚Üí ${this.inventoryMaterials.length} items`);
    
    // Show consolidation message
    const reducedCount = originalCount - this.inventoryMaterials.length;
    if (reducedCount > 0) {
      this.consolidationMessage = `‚úÖ ƒê√£ g·ªôp ${reducedCount} d√≤ng d·ªØ li·ªáu tr√πng l·∫∑p theo Material+PO. T·ª´ ${originalCount} ‚Üí ${this.inventoryMaterials.length} d√≤ng.`;
      this.showConsolidationMessage = true;
      
      // Auto-hide message after 5 seconds
      setTimeout(() => {
        this.showConsolidationMessage = false;
      }, 5000);
    } else {
      this.consolidationMessage = '‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu tr√πng l·∫∑p ƒë·ªÉ g·ªôp.';
      this.showConsolidationMessage = true;
      
      // Auto-hide message after 3 seconds
      setTimeout(() => {
        this.showConsolidationMessage = false;
      }, 3000);
    }
    
    // Mark duplicates after consolidation
    this.markDuplicates();
    
    } catch (error) {
      console.error('‚ùå Error during consolidation:', error);
    }
  }

  // Load permissions
  loadPermissions(): void {
    console.log('üîç DEBUG: loadPermissions called');
    
    this.tabPermissionService.canAccessTab('materials-asm1')
      .pipe(takeUntil(this.destroy$))
      .subscribe(canAccess => {
        console.log(`üîç DEBUG: Tab permission result for 'materials-asm1': ${canAccess}`);
        
        // Set basic permissions based on tab access
        this.canView = canAccess;
        this.canEdit = canAccess;
        this.canExport = canAccess;
        this.canDelete = canAccess;
        // this.canEditHSD = canAccess; // Removed - HSD column deleted
        
        // Reset export column lock if user doesn't have delete permission
        if (!this.canDelete && this.isExportColumnUnlocked) {
          this.isExportColumnUnlocked = false;
          console.log('üîí Export column automatically locked due to insufficient permissions');
        }
        
        // L∆∞u √Ω: C·ªôt "ƒê√£ xu·∫•t" ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a khi user c√≥ quy·ªÅn X√≥a v√† ƒë√£ m·ªü kh√≥a
        // kh√¥ng ph·ª• thu·ªôc v√†o canExport permission
        
        console.log('üîë ASM1 Permissions loaded:', {
          canView: this.canView,
          canEdit: this.canEdit,
          canExport: this.canExport,
          canDelete: this.canDelete,
          isExportColumnUnlocked: this.isExportColumnUnlocked,
          // canEditHSD: this.canEditHSD // Removed - HSD column deleted
        });
      });
  }

  // Import current stock with ASM1 filter
  async importCurrentStock(): Promise<void> {
    try {
      // Ask user for duplicate strategy
      const duplicateStrategy = await this.getDuplicateStrategy();
      if (!duplicateStrategy) return;

      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.xlsx,.xls,.csv';
      
      input.onchange = async (event: any) => {
        const file = event.target.files[0];
        if (!file) return;

        const validation = this.excelImportService.validateFile(file);
        if (!validation.valid) {
          alert(validation.message);
          return;
        }

        try {
          const dialogRef = this.dialog.open(ImportProgressDialogComponent, {
            width: '500px',
            disableClose: true,
            data: { progress$: this.excelImportService.progress$ }
          });

                      // Start import process with ASM1 filter and duplicate strategy
            const result = await this.excelImportService.importStockFile(file, 50, 'ASM1', duplicateStrategy);
          
          const dialogResult = await dialogRef.afterClosed().toPromise();
          
          // Show detailed import results
          this.showImportResults(result);
          
          // Reload inventory data
          await this.loadInventoryFromFirebase();
          
        } catch (error) {
          console.error('Import error:', error);
          alert(`‚ùå L·ªói import: ${error}`);
        }
      };
      
      input.click();
      
    } catch (error) {
      console.error('Error setting up file input:', error);
      alert('C√≥ l·ªói x·∫£y ra khi m·ªü file picker');
    }
  }

  // Get duplicate handling strategy from user
  private async getDuplicateStrategy(): Promise<'skip' | 'update' | 'ask' | null> {
    const strategy = prompt(
      'Ch·ªçn c√°ch x·ª≠ l√Ω items tr√πng l·∫∑p:\n' +
      '1 - B·ªè qua (Skip) - Ch·ªâ import items m·ªõi\n' +
      '2 - C·∫≠p nh·∫≠t (Update) - C·∫≠p nh·∫≠t t·∫•t c·∫£ items tr√πng l·∫∑p\n' +
      '3 - H·ªèi t·ª´ng item (Ask) - H·ªèi t·ª´ng item tr√πng l·∫∑p\n' +
      'Nh·∫≠p 1, 2, ho·∫∑c 3:',
      '3'
    );

    switch (strategy) {
      case '1': return 'skip';
      case '2': return 'update';
      case '3': return 'ask';
      default: return null;
    }
  }

  // Show detailed import results
  private showImportResults(result: { success: number; errors: string[]; duplicates: number; updated: number }): void {
    const totalProcessed = result.success + result.updated + result.duplicates;
    
    let message = `‚úÖ Import ho√†n th√†nh!\n\n`;
    message += `üìä T·ªïng quan:\n`;
    message += `   ‚Ä¢ T·ªïng items x·ª≠ l√Ω: ${totalProcessed}\n`;
    message += `   ‚Ä¢ Items m·ªõi: ${result.success}\n`;
    message += `   ‚Ä¢ Items c·∫≠p nh·∫≠t: ${result.updated}\n`;
    message += `   ‚Ä¢ Items b·ªè qua: ${result.duplicates}\n`;
    message += `   ‚Ä¢ L·ªói: ${result.errors.length}\n\n`;
    
    if (result.success > 0) {
      message += `üéâ ƒê√£ th√™m ${result.success} items m·ªõi v√†o inventory ASM1\n`;
    }
    
    if (result.updated > 0) {
      message += `üîÑ ƒê√£ c·∫≠p nh·∫≠t ${result.updated} items hi·ªán c√≥\n`;
    }
    
    if (result.duplicates > 0) {
      message += `‚è≠Ô∏è ƒê√£ b·ªè qua ${result.duplicates} items tr√πng l·∫∑p\n`;
    }
    
    if (result.errors.length > 0) {
      message += `\n‚ö†Ô∏è C√≥ ${result.errors.length} l·ªói x·∫£y ra`;
    }

    alert(message);

    // Show detailed errors if any
    if (result.errors.length > 0) {
      console.warn('Import errors:', result.errors);
      
      const errorMessage = result.errors.length <= 10 
        ? `Chi ti·∫øt l·ªói:\n${result.errors.join('\n')}`
        : `C√≥ ${result.errors.length} l·ªói. Xem console ƒë·ªÉ bi·∫øt chi ti·∫øt.\n\nL·ªói ƒë·∫ßu ti√™n:\n${result.errors.slice(0, 5).join('\n')}`;
      
      alert(`‚ö†Ô∏è ${errorMessage}`);
    }
  }

  // Placeholder methods - implement as needed
  toggleDropdown(event: any): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  async refreshInventory(): Promise<void> {
    await this.loadInventoryFromFirebase();
  }

  stopScanning(): void {
    if (this.html5QrCode) {
      this.html5QrCode.stop();
      this.html5QrCode = null;
    }
    this.isScanning = false;
  }

  autoResizeNotesColumn(): void {
    // Placeholder for auto-resize functionality
  }

  // Update Standard Packing only - Simple and focused
  async importCatalog(): Promise<void> {
    try {
      console.log('üì• Updating Standard Packing values');
      
      // Check Firebase status first
      try {
        console.log('üîç Testing Firebase connection...');
        const testSnapshot = await this.firestore.collection('materials').get().toPromise();
        if (testSnapshot) {
          console.log('‚úÖ Firebase connection OK');
        }
      } catch (firebaseError) {
        console.error('‚ùå Firebase connection failed:', firebaseError);
        
        if (firebaseError.code === 'resource-exhausted') {
          alert(`‚ùå KH√îNG TH·ªÇ K·∫æT N·ªêI FIREBASE!\n\nüö® Firebase Quota Exceeded\n\nüí° Gi·∫£i ph√°p:\n1. Ki·ªÉm tra Firebase Console ‚Üí Usage and billing\n2. ƒê·ª£i quota reset ho·∫∑c upgrade plan\n3. Th·ª≠ l·∫°i sau khi fix quota`);
          return;
        } else {
          alert(`‚ùå L·ªói k·∫øt n·ªëi Firebase:\n\n${firebaseError.message}\n\nüí° Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i`);
          return;
        }
      }
      
      // Create file input element
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = '.xlsx,.xls';
      fileInput.style.display = 'none';
      
      fileInput.onchange = async (event: any) => {
        const file = event.target.files[0];
        if (!file) return;
        
        try {
          // Show loading
          this.isCatalogLoading = true;
          
          // Read Excel file
          const data = await this.readExcelFile(file);
          console.log('üìä Excel data read:', data);
          
          // Process catalog data
          const catalogData = this.processCatalogData(data);
          console.log('üìã Processed catalog data:', catalogData);
          
          try {
            // Save to Firebase
            await this.saveCatalogToFirebase(catalogData);
            console.log('‚úÖ Firebase update completed successfully');
            
            // Update local cache
            this.updateCatalogCache(catalogData);
            
            // Reload catalog from Firebase to ensure consistency
            await this.loadCatalogFromFirebase();
            
            // Show success message ONLY after successful Firebase update
            alert(`‚úÖ C·∫≠p nh·∫≠t Standard Packing th√†nh c√¥ng!\n\nüì¶ T·ªïng s·ªë m√£ h√†ng: ${catalogData.length}\nüí° Ch·ªâ c·∫≠p nh·∫≠t field Standard Packing\nüéØ D·ªØ li·ªáu ƒë∆∞·ª£c update trong collections 'materials' (ch√≠nh) v√† 'catalog'\nüîÑ C·ªôt Standard Packing s·∫Ω hi·ªÉn th·ªã s·ªë ƒë√∫ng ngay l·∫≠p t·ª©c`);
            
          } catch (firebaseError) {
            console.error('‚ùå Firebase update failed:', firebaseError);
            
            // Check if it's a quota error
            if (firebaseError.code === 'resource-exhausted') {
              alert(`‚ùå KH√îNG TH·ªÇ L∆ØU D·ªÆ LI·ªÜU!\n\nüö® Firebase Quota Exceeded\n\nüí° Gi·∫£i ph√°p:\n1. Ki·ªÉm tra Firebase Console ‚Üí Usage and billing\n2. ƒê·ª£i quota reset ho·∫∑c upgrade plan\n3. Th·ª≠ l·∫°i sau khi fix quota`);
            } else {
              alert(`‚ùå L·ªói khi l∆∞u v√†o Firebase:\n\n${firebaseError.message}\n\nüí° Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin`);
            }
            
            // Don't show success message if Firebase failed
            return;
          }
          
        } catch (error) {
          console.error('‚ùå Error importing catalog:', error);
          alert('‚ùå L·ªói khi import danh m·ª•c: ' + error.message);
        } finally {
          this.isCatalogLoading = false;
          // Remove file input
          document.body.removeChild(fileInput);
        }
      };
      
      // Trigger file selection
      document.body.appendChild(fileInput);
      fileInput.click();
      
    } catch (error) {
      console.error('‚ùå Error in importCatalog:', error);
      alert('‚ùå L·ªói khi import danh m·ª•c: ' + error.message);
    }
  }

  // Read Excel file and return data
  private async readExcelFile(file: File): Promise<any[]> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e: any) => {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet);
          resolve(jsonData);
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = reject;
      reader.readAsArrayBuffer(file);
    });
  }

  // Process catalog data from Excel - FOCUS ON Standard Packing only
  private processCatalogData(data: any[]): any[] {
    return data.map(row => {
      // ‚úÖ CH·ªà C·∫¶N 2 FIELD: M√£ h√†ng + Standard Packing
      const materialCode = row['M√£ h√†ng'] || row['materialCode'] || row['M√£'] || row['Code'] || '';
      const standardPacking = parseFloat(row['Standard Packing'] || row['standardPacking'] || row['S·ªë l∆∞·ª£ng ƒë√≥ng g√≥i'] || '0') || 0;
      
      return {
        materialCode,
        standardPacking
      };
    }).filter(item => {
      // Filter out rows without materialCode
      const hasMaterialCode = item.materialCode && item.materialCode.trim() !== '';
      // Warn if standardPacking is 0
      if (hasMaterialCode && item.standardPacking === 0) {
        console.warn(`‚ö†Ô∏è Warning: Material ${item.materialCode} has standardPacking = 0`);
      }
      return hasMaterialCode;
    });
  }

  // Save catalog to Firebase - UPDATE Standard Packing in both collections
  private async saveCatalogToFirebase(catalogData: any[]): Promise<void> {
    try {
      console.log('üíæ Starting Firebase update...');
      
      const batch = this.firestore.firestore.batch();
      
              for (const item of catalogData) {
          // ‚úÖ UPDATE field standardPacking trong collection 'materials' (ch√≠nh - c√≥ 8750 docs)
          const materialsDocRef = this.firestore.collection('materials').doc(item.materialCode).ref;
          batch.update(materialsDocRef, {
            standardPacking: item.standardPacking,
            updatedAt: new Date()
          });
          
          // ‚úÖ C≈©ng UPDATE trong collection 'catalog' (ƒë·ªìng b·ªô)
          const catalogDocRef = this.firestore.collection('catalog').doc(item.materialCode).ref;
          batch.update(catalogDocRef, {
            standardPacking: item.standardPacking,
            updatedAt: new Date()
          });
          
          console.log(`üìù Prepared update for ${item.materialCode}: standardPacking = ${item.standardPacking}`);
        }
      
      console.log('üöÄ Committing batch update to Firebase...');
      await batch.commit();
      console.log(`‚úÖ Successfully updated Standard Packing for ${catalogData.length} materials in both collections`);
      
    } catch (error) {
      console.error('‚ùå Firebase update failed:', error);
      
      // Re-throw the error to be handled by the caller
      throw error;
    }
  }

  // Update local catalog cache
  private updateCatalogCache(catalogData: any[]): void {
    for (const item of catalogData) {
      this.catalogCache.set(item.materialCode, item);
    }
    this.catalogLoaded = true;
    console.log(`üîÑ Updated local catalog cache with ${catalogData.length} items`);
  }

  downloadCatalogTemplate(): void {
    try {
      console.log('üì• Downloading catalog template - Standard Packing only');
      
      // ‚úÖ CH·ªà C·∫¶N 2 C·ªòT: M√£ h√†ng + Standard Packing
      const templateData = [
        {
          'M√£ h√†ng': 'B001003',
          'Standard Packing': 100
        },
        {
          'M√£ h√†ng': 'P0123',
          'Standard Packing': 50
        },
        {
          'M√£ h√†ng': 'B018694',
          'Standard Packing': 200
        }
      ];
      
      // Create workbook and worksheet
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(templateData);
      
      // Set column widths - ch·ªâ 2 c·ªôt
      worksheet['!cols'] = [
        { width: 15 }, // M√£ h√†ng
        { width: 18 }  // Standard Packing
      ];
      
      // Add worksheet to workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, 'Standard Packing Update');
      
      // Generate file and download
      const fileName = `Standard_Packing_Update_ASM1_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(workbook, fileName);
      
      console.log('‚úÖ Standard Packing template downloaded successfully');
      
    } catch (error) {
      console.error('‚ùå Error downloading template:', error);
      alert('‚ùå L·ªói khi t·∫£i template: ' + error.message);
    }
  }

  downloadStockTemplate(): void {
    console.log('Download stock template');
  }

  downloadFIFOReportASM1(): void {
    console.log('Download FIFO report for ASM1');
  }

  // Delete single inventory item
  async deleteInventoryItem(material: InventoryMaterial): Promise<void> {
    console.log('üóëÔ∏è ASM1 deleteInventoryItem called for:', material.materialCode);
    
    // Check permissions
    if (!this.canDelete) {
      console.error('‚ùå User does not have delete permission');
      alert('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a item n√†y. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn.');
      return;
    }
    
    if (!material.id) {
      console.error('‚ùå Cannot delete item: No ID found');
      alert('‚ùå Kh√¥ng th·ªÉ x√≥a item: Kh√¥ng t√¨m th·∫•y ID');
      return;
    }
    
    if (confirm(`X√°c nh·∫≠n x√≥a item ${material.materialCode} kh·ªèi ASM1 Inventory?\n\nPO: ${material.poNumber}\nV·ªã tr√≠: ${material.location}\nS·ªë l∆∞·ª£ng: ${material.quantity} ${material.unit}`)) {
      console.log(`‚úÖ User confirmed deletion of ${material.materialCode}`);
      
      try {
        // Show loading
        this.isLoading = true;
        
        // Delete from Firebase
        await this.firestore.collection('inventory-materials').doc(material.id).delete();
        console.log('‚úÖ Item deleted from Firebase successfully');
        
        // Remove from local array
        const index = this.inventoryMaterials.indexOf(material);
        if (index > -1) {
          this.inventoryMaterials.splice(index, 1);
          console.log(`‚úÖ Removed ${material.materialCode} from local array`);
          
          // Refresh the view
          this.applyFilters();
          
          // Show success message
          alert(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng item ${material.materialCode}!\n\nPO: ${material.poNumber}\nV·ªã tr√≠: ${material.location}`);
        }
      } catch (error) {
        console.error('‚ùå Error deleting item:', error);
        alert(`‚ùå L·ªói khi x√≥a item ${material.materialCode}: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
      } finally {
        this.isLoading = false;
      }
    } else {
      console.log(`‚ùå User cancelled deletion of ${material.materialCode}`);
    }
  }

  // Delete all inventory for ASM1
  async deleteAllInventory(): Promise<void> {
    try {
      // Confirm deletion with user
      const confirmDelete = confirm(
        '‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a TO√ÄN B·ªò t·ªìn kho ASM1?\n\n' +
        'Thao t√°c n√†y s·∫Ω:\n' +
        '‚Ä¢ X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ªìn kho ASM1\n' +
        '‚Ä¢ Kh√¥ng th·ªÉ ho√†n t√°c\n' +
        '‚Ä¢ C·∫ßn import l·∫°i to√†n b·ªô d·ªØ li·ªáu\n\n' +
        'Nh·∫≠p "DELETE" ƒë·ªÉ x√°c nh·∫≠n:'
      );
      
      if (!confirmDelete) return;
      
      const userInput = prompt('Nh·∫≠p "DELETE" ƒë·ªÉ x√°c nh·∫≠n x√≥a to√†n b·ªô t·ªìn kho ASM1:');
      if (userInput !== 'DELETE') {
        alert('‚ùå X√°c nh·∫≠n kh√¥ng ƒë√∫ng. Thao t√°c b·ªã h·ªßy.');
        return;
      }

      // Show loading
      this.isLoading = true;
      
      // Get all ASM1 inventory documents
      const inventoryQuery = await this.firestore.collection('inventory-materials', ref =>
        ref.where('factory', '==', 'ASM1')
      ).get().toPromise();
      
      if (!inventoryQuery || inventoryQuery.empty) {
        alert('‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho ASM1 ƒë·ªÉ x√≥a.');
        this.isLoading = false;
        return;
      }

      const totalItems = inventoryQuery.docs.length;
      console.log(`üóëÔ∏è Starting deletion of ${totalItems} ASM1 inventory items...`);
      
      // Delete all documents in batches
      const batchSize = 500; // Firestore batch limit
      const batches = [];
      
      for (let i = 0; i < inventoryQuery.docs.length; i += batchSize) {
        const batch = this.firestore.firestore.batch();
        const batchDocs = inventoryQuery.docs.slice(i, i + batchSize);
        
        batchDocs.forEach(doc => {
          batch.delete(doc.ref);
        });
        
        batches.push(batch);
      }
      
      // Execute all batches
      let deletedCount = 0;
      for (const batch of batches) {
        await batch.commit();
        deletedCount += batchSize;
        console.log(`‚úÖ Deleted batch: ${deletedCount}/${totalItems} items`);
      }
      
      // Clear local data
      this.inventoryMaterials = [];
      this.filteredInventory = [];
      
      // Show success message
      alert(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${totalItems} items t·ªìn kho ASM1!\n\n` +
            `B·∫°n c√≥ th·ªÉ import l·∫°i d·ªØ li·ªáu m·ªõi.`);
      
      console.log(`‚úÖ Successfully deleted all ${totalItems} ASM1 inventory items`);
      
    } catch (error) {
      console.error('‚ùå Error deleting all inventory:', error);
      alert(`‚ùå L·ªói khi x√≥a t·ªìn kho: ${error.message}`);
    } finally {
      this.isLoading = false;
    }
  }

  // completeInventory method removed - replaced with resetZeroStock
  // completeInventory(): void {
  //   this.showCompleted = !this.showCompleted;
  // }

  async syncFromInbound(): Promise<void> {
    console.log('üîÑ Syncing inventory data from Firebase...');
    
    // Reload inventory data from Firebase
    await this.loadInventoryFromFirebase();
    
    // Reload catalog data
    this.loadCatalogFromFirebase();
    
    console.log('‚úÖ Sync completed - Data reloaded from Firebase');
  }

  // Update methods for editing
  // updateExported method removed - exported quantity is now read-only and auto-updated from outbound

  updateLocation(material: InventoryMaterial): void {
    if (!this.canEdit) return;
    this.updateMaterialInFirebase(material);
    
    // Update negative stock count for real-time display
    this.updateNegativeStockCount();
  }

  updateType(material: InventoryMaterial): void {
    if (!this.canEdit) return;
    this.updateMaterialInFirebase(material);
    
    // Update negative stock count for real-time display
    this.updateNegativeStockCount();
  }

  updateRollsOrBags(material: InventoryMaterial): void {
    if (!this.canEdit) return;
    this.updateMaterialInFirebase(material);
    
    // Update negative stock count for real-time display
    this.updateNegativeStockCount();
  }

  updateRemarks(material: InventoryMaterial): void {
    if (!this.canEdit) return;
    this.updateMaterialInFirebase(material);
    
    // Update negative stock count for real-time display
    this.updateNegativeStockCount();
  }

  // onHSDChange method removed - HSD column deleted
  // onHSDChange(event: any, material: InventoryMaterial): void {
  //   if (!this.canEditHSD) return;
  //   const dateValue = event.target.value;
  //   if (dateValue) {
  //     material.expiryDate = new Date(dateValue);
  //     this.updateMaterialInFirebase(material);
  //   }
  // }

  onLocationChange(material: InventoryMaterial): void {
    if (!this.canEdit) return;
    this.updateMaterialInFirebase(material);
  }



  // Update material in Firebase
  private updateMaterialInFirebase(material: InventoryMaterial): void {
    console.log(`üîç DEBUG: updateMaterialInFirebase called for ${material.materialCode}`);
    console.log(`üîç DEBUG: material.id = ${material.id}`);
    
    if (!material.id) {
      console.log(`‚ùå DEBUG: No material ID - cannot save to Firebase`);
      return;
    }
    
    material.updatedAt = new Date();
    
    console.log(`üíæ Saving to Firebase: ${material.materialCode} - Exported: ${material.exported || 0} - XT: ${material.xt || 0}`);
    console.log(`üîç DEBUG: Full material object:`, material);
    
    // Prepare update data, only include defined values
    // Note: exported field is included when user manually updates it
    const updateData: any = {
      exported: material.exported || 0, // ƒê·∫£m b·∫£o exported lu√¥n c√≥ gi√° tr·ªã
      updatedAt: material.updatedAt
    };
    
    // Ch·ªâ th√™m c√°c field c√≥ gi√° tr·ªã
    if (material.openingStock !== undefined && material.openingStock !== null) {
      updateData.openingStock = material.openingStock;
    }
    
    if (material.xt !== undefined && material.xt !== null) {
      updateData.xt = material.xt;
    }
    
    if (material.location) {
      updateData.location = material.location;
    }
    
    if (material.type) {
      updateData.type = material.type;
    }
    
    if (material.rollsOrBags !== undefined && material.rollsOrBags !== null) {
      updateData.rollsOrBags = material.rollsOrBags;
    }
    
    if (material.remarks) {
      updateData.remarks = material.remarks;
    }
    
    if (material.expiryDate) {
      updateData.expiryDate = material.expiryDate;
    }
    
    // Only add standardPacking if it has a valid value
    if (material.standardPacking !== undefined && material.standardPacking !== null) {
      updateData.standardPacking = material.standardPacking;
    }
    
    console.log(`üîç DEBUG: Update data to Firebase:`, updateData);
    
    this.firestore.collection('inventory-materials').doc(material.id).update(updateData).then(() => {
      console.log(`‚úÖ ASM1 Material updated successfully: ${material.materialCode}`);
      console.log(`üìä Stock updated: ${this.calculateCurrentStock(material)} (Quantity: ${material.quantity} - Exported: ${material.exported} - XT: ${material.xt || 0})`);
      
      // Update negative stock count for real-time display
      this.updateNegativeStockCount();
      
      // Show success message to user
      this.showUpdateSuccessMessage(material);
      
    }).catch(error => {
      console.error(`‚ùå Error updating ASM1 material ${material.materialCode}:`, error);
      
      // Show error message to user
      this.showUpdateErrorMessage(material, error);
    });
  }

  // Show success message when update is successful
  private showUpdateSuccessMessage(material: InventoryMaterial): void {
    const stock = this.calculateCurrentStock(material);
    console.log(`üéâ Update successful! ${material.materialCode} - New stock: ${stock}`);
    
    // You can add a toast notification here if needed
    // For now, just log to console
  }

  // Show error message when update fails
  private showUpdateErrorMessage(material: InventoryMaterial, error: any): void {
    console.error(`üí• Update failed for ${material.materialCode}:`, error.message);
    
    // You can add an error toast notification here if needed
    // For now, just log to console
  }

  // Calculate current stock for display
  calculateCurrentStock(material: InventoryMaterial): number {
    const openingStockValue = material.openingStock !== null ? material.openingStock : 0;
    const stock = openingStockValue + (material.quantity || 0) - (material.exported || 0) - (material.xt || 0);
    return stock;
  }

  // Calculate total stock for all filtered materials
  getTotalStock(): number {
    if (!this.filteredInventory || this.filteredInventory.length === 0) {
      return 0;
    }
    
    const totalStock = this.filteredInventory.reduce((sum, material) => {
      return sum + this.calculateCurrentStock(material);
    }, 0);
    
    // Update the BehaviorSubject for reactive updates
    this.totalStockSubject.next(totalStock);
    
    return totalStock;
  }

  // üîß QUERY LOGIC M·ªöI: L·∫•y s·ªë l∆∞·ª£ng xu·∫•t t·ª´ Outbound theo Material + PO (kh√¥ng c√≤n v·ªã tr√≠)
  // - Tr∆∞·ªõc ƒë√¢y: Query theo Material + PO + Location ‚Üí B·ªã l·ªói khi Outbound kh√¥ng c√≥ v·ªã tr√≠
  // - B√¢y gi·ªù: Ch·ªâ query theo Material + PO ‚Üí L·∫•y t·∫•t c·∫£ outbound records
  // - K·∫øt qu·∫£: S·ªë l∆∞·ª£ng xu·∫•t ch√≠nh x√°c cho t·ª´ng Material + PO
  // - Kh√¥ng c√≤n b·ªã l·ªói s·ªë √¢m sai khi search
  async getExportedQuantityFromOutbound(materialCode: string, poNumber: string, location: string): Promise<number> {
    try {
      console.log(`üîç Getting exported quantity for ${materialCode} - PO: ${poNumber}`);
      
      const outboundRef = this.firestore.collection('outbound-materials');
      const snapshot = await outboundRef
        .ref
        .where('factory', '==', 'ASM1')
        .where('materialCode', '==', materialCode)
        .where('poNumber', '==', poNumber)
        .get();

      if (!snapshot.empty) {
        let totalExported = 0;
        snapshot.forEach(doc => {
          const data = doc.data() as any;
          totalExported += (data.exportQuantity || 0);
        });
        
        console.log(`‚úÖ Total exported quantity for ${materialCode} - PO ${poNumber}: ${totalExported}`);
        return totalExported;
      } else {
        console.log(`‚ÑπÔ∏è No outbound records found for ${materialCode} - PO ${poNumber}`);
        return 0;
      }
    } catch (error) {
      console.error(`‚ùå Error getting exported quantity for ${materialCode} - PO ${poNumber}:`, error);
      return 0;
    }
  }

  // üîß LOGIC FIFO M·ªöI: L·∫•y s·ªë l∆∞·ª£ng xu·∫•t t·ª´ Outbound theo FIFO (Material + PO + Batch)
  // - S·ª≠ d·ª•ng logic FIFO ƒë·ªÉ ph√¢n b·ªï s·ªë l∆∞·ª£ng xu·∫•t cho t·ª´ng d√≤ng inventory
  // - ƒê·∫£m b·∫£o d√≤ng c√≥ FIFO th·∫•p nh·∫•t ƒë∆∞·ª£c tr·ª´ tr∆∞·ªõc
  // - Tr√°nh t·ªìn kho √¢m ·ªü c√°c d√≤ng sau
  // - QUAN TR·ªåNG: Ph·∫£i match theo Material + PO + Batch ƒë·ªÉ tr√°nh nh·∫≠n sai d·ªØ li·ªáu
  async getExportedQuantityFromOutboundFIFO(materialCode: string, poNumber: string, batch?: string): Promise<{ totalExported: number; outboundRecords: any[] }> {
    try {
      console.log(`üîç Getting exported quantity with FIFO logic for ${materialCode} - PO: ${poNumber}`);
      
      const outboundRef = this.firestore.collection('outbound-materials');
      
      // QUAN TR·ªåNG: Query theo Material + PO + Batch ƒë·ªÉ tr√°nh nh·∫≠n sai d·ªØ li·ªáu
      let snapshot;
      try {
        if (batch) {
          // N·∫øu c√≥ batch, query theo Material + PO + Batch
          console.log(`üîç Querying with batch: ${materialCode} - PO: ${poNumber} - Batch: ${batch}`);
          
          // Th·ª≠ query v·ªõi field 'batch' tr∆∞·ªõc
          try {
            snapshot = await outboundRef
              .ref
              .where('factory', '==', 'ASM1')
              .where('materialCode', '==', materialCode)
              .where('poNumber', '==', poNumber)
              .where('batch', '==', batch)
              .orderBy('exportDate', 'asc')
              .get();
          } catch (batchError) {
            console.log(`‚ö†Ô∏è Query with 'batch' field failed, trying with 'batchNumber':`, batchError);
            // Fallback: th·ª≠ v·ªõi field 'batchNumber'
            snapshot = await outboundRef
              .ref
              .where('factory', '==', 'ASM1')
              .where('materialCode', '==', materialCode)
              .where('poNumber', '==', poNumber)
              .where('batchNumber', '==', batch)
              .orderBy('exportDate', 'asc')
              .get();
          }
        } else {
          // N·∫øu kh√¥ng c√≥ batch, query theo Material + PO (fallback)
          console.log(`‚ö†Ô∏è No batch provided, querying without batch: ${materialCode} - PO: ${poNumber}`);
          snapshot = await outboundRef
            .ref
            .where('factory', '==', 'ASM1')
            .where('materialCode', '==', materialCode)
            .where('poNumber', '==', poNumber)
            .orderBy('exportDate', 'asc')
            .get();
        }
              } catch (orderByError) {
          console.log(`‚ö†Ô∏è OrderBy exportDate failed, trying without orderBy:`, orderByError);
          // Fallback: t√¨m kh√¥ng c√≥ orderBy
          if (batch) {
            // Th·ª≠ query v·ªõi field 'batch' tr∆∞·ªõc
            try {
              snapshot = await outboundRef
                .ref
                .where('factory', '==', 'ASM1')
                .where('materialCode', '==', materialCode)
                .where('poNumber', '==', poNumber)
                .where('batch', '==', batch)
                .get();
            } catch (batchError) {
              console.log(`‚ö†Ô∏è Query with 'batch' field failed, trying with 'batchNumber':`, batchError);
              // Fallback: th·ª≠ v·ªõi field 'batchNumber'
              snapshot = await outboundRef
                .ref
                .where('factory', '==', 'ASM1')
                .where('materialCode', '==', materialCode)
                .where('poNumber', '==', poNumber)
                .where('batchNumber', '==', batch)
                .get();
            }
          } else {
            snapshot = await outboundRef
              .ref
              .where('factory', '==', 'ASM1')
              .where('materialCode', '==', materialCode)
              .where('poNumber', '==', poNumber)
              .get();
          }
        }

      if (!snapshot.empty) {
        let totalExported = 0;
        const outboundRecords: any[] = [];
        
        snapshot.forEach(doc => {
          const data = doc.data() as any;
          // Th·ª≠ nhi·ªÅu field names kh√°c nhau ƒë·ªÉ t√¨m s·ªë l∆∞·ª£ng xu·∫•t
          let exportQuantity = 0;
          
          // Ki·ªÉm tra t·ª´ng field name c√≥ th·ªÉ c√≥
          if (data.exportQuantity !== undefined && data.exportQuantity !== null) {
            exportQuantity = data.exportQuantity;
          } else if (data.exported !== undefined && data.exported !== null) {
            exportQuantity = data.exported;
          } else if (data.quantity !== undefined && data.quantity !== null) {
            exportQuantity = data.quantity;
          } else if (data.amount !== undefined && data.amount !== null) {
            exportQuantity = data.amount;
          } else if (data.qty !== undefined && data.qty !== null) {
            exportQuantity = data.qty;
          }
          
          // ƒê·∫£m b·∫£o exportQuantity l√† s·ªë
          if (typeof exportQuantity === 'string') {
            exportQuantity = parseFloat(exportQuantity) || 0;
          }
          
          totalExported += exportQuantity;
          
          outboundRecords.push({
            id: doc.id,
            exportQuantity: exportQuantity,
            exportDate: data.exportDate,
            location: data.location || 'N/A'
          });
          
          console.log(`üîç Debug: Outbound record - ID: ${doc.id}, Material: ${data.materialCode}, PO: ${data.poNumber}, Quantity: ${exportQuantity}`);
        });
        
        const batchInfo = batch ? ` - Batch: ${batch}` : '';
        console.log(`‚úÖ Total exported quantity with FIFO for ${materialCode} - PO ${poNumber}${batchInfo}: ${totalExported} (${outboundRecords.length} records)`);
        
        // Debug: Log chi ti·∫øt t·ª´ng record v√† raw data
        console.log(`üìã Detailed outbound records:`);
        outboundRecords.forEach((record, index) => {
          console.log(`  ${index + 1}. ID: ${record.id}, Quantity: ${record.exportQuantity}, Date: ${record.exportDate}, Location: ${record.location}`);
        });
        
        // Debug: Log raw data t·ª´ snapshot ƒë·ªÉ ki·ªÉm tra field names
        console.log(`üîç Raw snapshot data for debugging:`);
        snapshot.forEach(doc => {
          const rawData = doc.data();
          console.log(`  Doc ${doc.id}:`, {
            materialCode: rawData.materialCode,
            poNumber: rawData.poNumber,
            batch: rawData.batch,
            batchNumber: rawData.batchNumber, // Ki·ªÉm tra c·∫£ batch v√† batchNumber
            exportQuantity: rawData.exportQuantity,
            exported: rawData.exported,
            quantity: rawData.quantity,
            exportDate: rawData.exportDate,
            factory: rawData.factory
          });
        });
        
        return { totalExported, outboundRecords };
      } else {
        console.log(`‚ÑπÔ∏è No outbound records found for ${materialCode} - PO ${poNumber}`);
        
        // Debug: Ki·ªÉm tra xem c√≥ records n√†o v·ªõi material code n√†y kh√¥ng
        const debugSnapshot = await outboundRef
          .ref
          .where('factory', '==', 'ASM1')
          .where('materialCode', '==', materialCode)
          .limit(5)
          .get();
        
        if (!debugSnapshot.empty) {
          console.log(`üîç Found ${debugSnapshot.size} outbound records with material code ${materialCode}, but PO numbers don't match:`);
          debugSnapshot.forEach(doc => {
            const data = doc.data() as any;
            console.log(`  - PO: "${data.poNumber}" (type: ${typeof data.poNumber}), Material: "${data.materialCode}" (type: ${typeof data.materialCode})`);
          });
        } else {
          console.log(`‚ö†Ô∏è No outbound records found at all for material code ${materialCode}`);
        }
        
        return { totalExported: 0, outboundRecords: [] };
      }
    } catch (error) {
      console.error(`‚ùå Error getting exported quantity with FIFO for ${materialCode} - PO ${poNumber}:`, error);
      return { totalExported: 0, outboundRecords: [] };
    }
  }



  // üîß UPDATE LOGIC ƒê∆†N GI·∫¢N: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t t·ª´ Outbound
  // - L·∫•y t·ªïng s·ªë l∆∞·ª£ng xu·∫•t t·ª´ outbound theo Material + PO
  // - C·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o inventory
  async updateExportedFromOutboundFIFO(material: InventoryMaterial): Promise<void> {
    try {
      console.log(`üîÑ Updating exported quantity for ${material.materialCode} - PO ${material.poNumber}`);
      
      // L·∫•y th√¥ng tin outbound - QUAN TR·ªåNG: Truy·ªÅn batch ƒë·ªÉ tr√°nh nh·∫≠n sai d·ªØ li·ªáu
      const { totalExported, outboundRecords } = await this.getExportedQuantityFromOutboundFIFO(
        material.materialCode, 
        material.poNumber, 
        material.batchNumber // Truy·ªÅn batchNumber ƒë·ªÉ query ch√≠nh x√°c
      );
      
      console.log(`üîç Debug: ${material.materialCode} - PO ${material.poNumber} - Total exported from outbound: ${totalExported}, Records: ${outboundRecords.length}`);
      
      // Debug chi ti·∫øt: Ki·ªÉm tra t·ª´ng outbound record
      if (outboundRecords.length > 0) {
        console.log(`üìã Outbound records found:`);
        outboundRecords.forEach((record, index) => {
          console.log(`  ${index + 1}. Material: ${record.materialCode}, PO: ${record.poNumber}, Quantity: ${record.exportQuantity || record.quantity}, Date: ${record.exportDate}`);
        });
      } else {
        console.log(`üîç No outbound records found for ${material.materialCode} - ${material.poNumber}`);
        console.log(`üí° Checking if outbound records exist with different criteria...`);
        
        // Ki·ªÉm tra t·∫•t c·∫£ outbound records c√≥ material code n√†y
        const allOutboundQuery = await this.firestore.collection('outbound-materials')
          .ref
          .where('factory', '==', 'ASM1')
          .where('materialCode', '==', material.materialCode)
          .limit(10)
          .get();
        
        if (!allOutboundQuery.empty) {
          console.log(`üìã Found ${allOutboundQuery.size} outbound records with material code ${material.materialCode}:`);
          allOutboundQuery.forEach(doc => {
            const data = doc.data() as any;
            console.log(`  - PO: "${data.poNumber}" (type: ${typeof data.poNumber}), Quantity: ${data.exportQuantity || data.quantity}`);
          });
        } else {
          console.log(`‚ö†Ô∏è No outbound records found at all for material code ${material.materialCode}`);
        }
      }
      
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t tr·ª±c ti·∫øp - CH·ªà C·∫¨P NH·∫¨T N·∫æU T√åM TH·∫§Y OUTBOUND RECORDS
      if (outboundRecords.length > 0) {
        if (material.exported !== totalExported) {
          material.exported = totalExported;
          await this.updateExportedInFirebase(material, totalExported);
          console.log(`üìä Updated exported quantity: ${material.exported} ‚Üí ${totalExported}`);
        } else {
          console.log(`üìä Exported quantity already up-to-date: ${material.exported}`);
        }
      } else {
        // KH√îNG T√åM TH·∫§Y OUTBOUND RECORDS - GI·ªÆ NGUY√äN GI√Å TR·ªä EXPORTED HI·ªÜN T·∫†I
        console.log(`‚ö†Ô∏è No outbound records found - Keeping current exported: ${material.exported}`);
        console.log(`üí° This prevents overwriting exported quantity to 0 when outbound data is missing`);
      }

    } catch (error) {
      console.error(`‚ùå Error updating exported quantity for ${material.materialCode} - PO ${material.poNumber}:`, error);
    }
  }

  // Helper method ƒë·ªÉ c·∫≠p nh·∫≠t exported quantity v√†o Firebase
  private async updateExportedInFirebase(material: InventoryMaterial, exportedQuantity: number): Promise<void> {
    console.log(`üîç updateExportedInFirebase called with:`);
    console.log(`  - material.id: ${material.id}`);
    console.log(`  - material.materialCode: ${material.materialCode}`);
    console.log(`  - material.poNumber: ${material.poNumber}`);
    console.log(`  - exportedQuantity: ${exportedQuantity}`);
    
    if (!material.id) {
      console.error(`‚ùå Cannot update: material.id is missing for ${material.materialCode} - PO ${material.poNumber}`);
      return;
    }
    
    try {
      console.log(`üîÑ Updating Firebase document: inventory-materials/${material.id}`);
      const updateData = {
        exported: exportedQuantity,
        updatedAt: new Date()
      };
      console.log(`üìù Update data:`, updateData);
      
      await this.firestore.collection('inventory-materials').doc(material.id).update(updateData);
      console.log(`üíæ Exported quantity saved to Firebase: ${material.materialCode} - PO ${material.poNumber} = ${exportedQuantity}`);
    } catch (error) {
      console.error(`‚ùå Error saving exported quantity to Firebase: ${material.materialCode} - PO ${material.poNumber}:`, error);
      console.error(`‚ùå Full error details:`, error);
    }
  }
  
  // Test method ƒë·ªÉ ki·ªÉm tra logic FIFO
  async testFIFOLogic(materialCode: string, poNumber: string): Promise<void> {
    try {
      console.log(`üß™ Testing FIFO logic for ${materialCode} - PO ${poNumber}`);
      
      // T√¨m t·∫•t c·∫£ d√≤ng inventory c√πng Material + PO
      const allInventoryItems = this.inventoryMaterials.filter(item => 
        item.materialCode === materialCode && 
        item.poNumber === poNumber
      );
      
      if (allInventoryItems.length === 0) {
        console.log(`‚ö†Ô∏è No inventory items found for ${materialCode} - PO ${poNumber}`);
        return;
      }
      
      console.log(`üìä Found ${allInventoryItems.length} inventory items:`);
      allInventoryItems.forEach(item => {
        const availableStock = (item.openingStock || 0) + item.quantity - (item.xt || 0);
        console.log(`  Item: Stock=${availableStock}, Exported=${item.exported || 0}, Current=${this.calculateCurrentStock(item)}`);
      });
      
      // L·∫•y th√¥ng tin outbound - L∆∞u √Ω: testFIFOLogic kh√¥ng c√≥ batch c·ª• th·ªÉ n√™n s·∫Ω query theo Material + PO
      const { totalExported } = await this.getExportedQuantityFromOutboundFIFO(materialCode, poNumber);
      console.log(`üì¶ Total outbound: ${totalExported}`);
      
      // M√¥ ph·ªèng ph√¢n b·ªï FIFO
      let remainingExported = totalExported;
      console.log(`üîÑ FIFO Distribution Simulation:`);
      
      for (const item of allInventoryItems) {
        if (remainingExported <= 0) break;
        
        const availableStock = (item.openingStock || 0) + item.quantity - (item.xt || 0);
        if (availableStock <= 0) {
          console.log(`  Item: Skip (no stock)`);
          continue;
        }
        
        const exportedFromThisItem = Math.min(remainingExported, availableStock);
        console.log(`  Item: Export ${exportedFromThisItem} from ${availableStock} available, Remaining: ${remainingExported - exportedFromThisItem}`);
        
        remainingExported -= exportedFromThisItem;
      }
      
      console.log(`‚úÖ FIFO test completed for ${materialCode} - PO ${poNumber}`);
      
    } catch (error) {
      console.error(`‚ùå Error testing FIFO logic for ${materialCode} - PO ${poNumber}:`, error);
    }
  }

  // Test method ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu outbound
  async testOutboundData(): Promise<void> {
    try {
      console.log('üîç Testing outbound data...');
      
      // Ki·ªÉm tra collection outbound-materials
      const outboundSnapshot = await this.firestore.collection('outbound-materials')
        .ref
        .where('factory', '==', 'ASM1')
        .limit(10)
        .get();
      
      console.log(`üìä Found ${outboundSnapshot.size} outbound records for ASM1`);
      
      if (!outboundSnapshot.empty) {
        outboundSnapshot.forEach(doc => {
          const data = doc.data() as any;
          console.log(`üì¶ Outbound: ${data.materialCode} - PO: ${data.poNumber} - Quantity: ${data.exportQuantity || data.exported || data.quantity || 'N/A'} - Date: ${data.exportDate}`);
        });
      } else {
        console.log('‚ö†Ô∏è No outbound records found for ASM1');
        
        // Ki·ªÉm tra xem c√≥ collection n√†o kh√°c kh√¥ng
        console.log('üîç Checking other possible collections...');
        const collections = ['outbound', 'exports', 'shipments', 'materials-out'];
        
        for (const collectionName of collections) {
          try {
            const snapshot = await this.firestore.collection(collectionName).ref.limit(1).get();
            if (snapshot && !snapshot.empty) {
              console.log(`‚úÖ Found collection: ${collectionName} with ${snapshot.size} documents`);
              const sampleDoc = snapshot.docs[0].data() as any;
              console.log(`üìã Sample document fields:`, Object.keys(sampleDoc));
            }
          } catch (e) {
            console.log(`‚ùå Collection ${collectionName} not found`);
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error testing outbound data:', error);
    }
  }

  // Test method ƒë·ªÉ ki·ªÉm tra link outbound-inventory
  async testOutboundInventoryLink(materialCode: string, poNumber: string): Promise<void> {
    try {
      console.log(`üîó Testing outbound-inventory link for ${materialCode} - PO ${poNumber}`);
      
      // 1. Ki·ªÉm tra d·ªØ li·ªáu outbound - L∆∞u √Ω: testOutboundInventoryLink kh√¥ng c√≥ batch c·ª• th·ªÉ n√™n s·∫Ω query theo Material + PO
      const { totalExported, outboundRecords } = await this.getExportedQuantityFromOutboundFIFO(materialCode, poNumber);
      console.log(`üì¶ Outbound data: ${totalExported} units from ${outboundRecords.length} records`);
      
      // 2. Ki·ªÉm tra d·ªØ li·ªáu inventory
      const inventoryItems = this.inventoryMaterials.filter(item => 
        item.materialCode === materialCode && 
        item.poNumber === poNumber
      );
      console.log(`üìã Inventory items: ${inventoryItems.length} found`);
      
      inventoryItems.forEach((item, index) => {
        console.log(`  ${index + 1}. ID: ${item.id}, Location: ${item.location}, Exported: ${item.exported}, Stock: ${this.calculateCurrentStock(item)}`);
      });
      
      // 3. So s√°nh
      const totalInventoryExported = inventoryItems.reduce((sum, item) => sum + (item.exported || 0), 0);
      console.log(`üîç Comparison: Outbound total = ${totalExported}, Inventory total = ${totalInventoryExported}`);
      
      if (totalExported === totalInventoryExported) {
        console.log(`‚úÖ Link is working correctly!`);
      } else {
        console.log(`‚ö†Ô∏è Link mismatch! Need to sync.`);
      }
      
    } catch (error) {
      console.error(`‚ùå Error testing outbound-inventory link:`, error);
    }
  }

  // T·∫°o d·ªØ li·ªáu test outbound n·∫øu kh√¥ng c√≥
  async createTestOutboundData(): Promise<void> {
    try {
      console.log('üß™ Creating test outbound data...');
      
      // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu outbound n√†o kh√¥ng
      const existingSnapshot = await this.firestore.collection('outbound-materials')
        .ref
        .where('factory', '==', 'ASM1')
        .limit(1)
        .get();
      
      if (!existingSnapshot.empty) {
        console.log('‚úÖ Outbound data already exists, no need to create test data');
        return;
      }
      
      // T·∫°o d·ªØ li·ªáu test cho m√£ h√†ng B024052
      const testData = [
        {
          factory: 'ASM1',
          materialCode: 'B024052',
          poNumber: 'KZP00525/0207',
          exportQuantity: 5,
          exportDate: new Date(),
          location: 'A1',
          notes: 'Test data - Auto generated'
        },
        {
          factory: 'ASM1',
          materialCode: 'B024052',
          poNumber: 'KZP00625/0070',
          exportQuantity: 3,
          exportDate: new Date(),
          location: 'B2',
          notes: 'Test data - Auto generated'
        }
      ];
      
      // Th√™m v√†o Firebase
      for (const data of testData) {
        await this.firestore.collection('outbound-materials').add(data);
        console.log(`‚úÖ Created test outbound record: ${data.materialCode} - PO ${data.poNumber} - Quantity: ${data.exportQuantity}`);
      }
      
      console.log('‚úÖ Test outbound data created successfully!');
      
      // Refresh d·ªØ li·ªáu
      setTimeout(() => {
        this.autoUpdateAllExportedFromOutbound();
      }, 1000);
      
    } catch (error) {
      console.error('‚ùå Error creating test outbound data:', error);
    }
  }

  // C·∫≠p nh·∫≠t display sau khi sync ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
  private updateDisplayAfterSync(): void {
    try {
      console.log('üîÑ Updating display after sync...');
      
      // ƒê·∫£m b·∫£o d·ªØ li·ªáu exported ƒë∆∞·ª£c gi·ªØ nguy√™n
      this.filteredInventory = this.filteredInventory.map(item => {
        const originalItem = this.inventoryMaterials.find(m => m.id === item.id);
        if (originalItem && originalItem.exported !== undefined) {
          item.exported = originalItem.exported;
        }
        return item;
      });
      
      // C·∫≠p nh·∫≠t counters
      this.updateNegativeStockCount();
      this.updateTotalStockCount();
      
      console.log('‚úÖ Display updated after sync');
      
    } catch (error) {
      console.error('‚ùå Error updating display after sync:', error);
    }
  }

  // Auto-fix v√† test to√†n b·ªô h·ªá th·ªëng
  async autoFixAndTest(): Promise<void> {
    try {
      console.log('üîß Starting auto-fix and test process...');
      
      // 1. Ki·ªÉm tra d·ªØ li·ªáu outbound
      console.log('üìã Step 1: Checking outbound data...');
      await this.testOutboundData();
      
      // 2. T·∫°o d·ªØ li·ªáu test n·∫øu c·∫ßn
      console.log('üìã Step 2: Creating test data if needed...');
      await this.createTestOutboundData();
      
      // 3. Sync d·ªØ li·ªáu t·ª´ outbound
      console.log('üìã Step 3: Syncing data from outbound...');
      await this.syncAllExportedFromOutbound();
      
      // 4. Test link c·ª• th·ªÉ
      console.log('üìã Step 4: Testing specific links...');
      if (this.inventoryMaterials.length > 0) {
        const firstMaterial = this.inventoryMaterials[0];
        await this.testOutboundInventoryLink(firstMaterial.materialCode, firstMaterial.poNumber);
      }
      
      console.log('‚úÖ Auto-fix and test process completed!');
      
    } catch (error) {
      console.error('‚ùå Error during auto-fix and test:', error);
    }
  }

  // Fix c·∫£ 2 v·∫•n ƒë·ªÅ: g·ªôp d√≤ng v√† hi·ªÉn th·ªã s·ªë l∆∞·ª£ng xu·∫•t
  async fixInventoryIssues(): Promise<void> {
    try {
      console.log('üîß Fixing inventory issues...');
      
      // 1. Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
      console.log(`üìä Current state: ${this.inventoryMaterials.length} materials, ${this.filteredInventory.length} filtered`);
      
      // 2. G·ªôp d√≤ng tr√πng l·∫∑p (m√£ h√†ng + PO)
      console.log('üîÑ Step 1: Consolidating duplicate materials...');
      const beforeCount = this.inventoryMaterials.length;
      this.consolidateInventoryData();
      const afterCount = this.inventoryMaterials.length;
      console.log(`‚úÖ Consolidation: ${beforeCount} ‚Üí ${afterCount} items`);
      
      // 3. T·∫°o d·ªØ li·ªáu test outbound n·∫øu c·∫ßn
      console.log('üîÑ Step 2: Creating test outbound data...');
      await this.createTestOutboundData();
      
      // 4. Sync s·ªë l∆∞·ª£ng xu·∫•t t·ª´ outbound
      console.log('üîÑ Step 3: Syncing exported quantities...');
      await this.syncAllExportedFromOutbound();
      
      // 5. Ki·ªÉm tra k·∫øt qu·∫£
      console.log('üîÑ Step 4: Checking results...');
      this.inventoryMaterials.forEach((material, index) => {
        console.log(`${index + 1}. ${material.materialCode} - PO: ${material.poNumber} - Exported: ${material.exported} - Stock: ${this.calculateCurrentStock(material)}`);
      });
      
      // 6. C·∫≠p nh·∫≠t display
      this.filteredInventory = [...this.inventoryMaterials];
      this.updateNegativeStockCount();
      
      console.log('‚úÖ Inventory issues fixed!');
      
    } catch (error) {
      console.error('‚ùå Error fixing inventory issues:', error);
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i g·ªôp d√≤ng
  checkConsolidationStatus(): void {
    try {
      console.log('üîç Checking consolidation status...');
      
      // Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i
      const materialPoMap = new Map<string, InventoryMaterial[]>();
      
      this.inventoryMaterials.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        if (!materialPoMap.has(key)) {
          materialPoMap.set(key, []);
        }
        materialPoMap.get(key)!.push(material);
      });
      
      // Hi·ªÉn th·ªã th·ªëng k√™
      console.log(`üìä Total materials: ${this.inventoryMaterials.length}`);
      console.log(`üìä Unique Material+PO combinations: ${materialPoMap.size}`);
      
      // Hi·ªÉn th·ªã c√°c d√≤ng tr√πng l·∫∑p
      materialPoMap.forEach((materials, key) => {
        if (materials.length > 1) {
          console.log(`‚ö†Ô∏è Duplicate found: ${key} (${materials.length} items)`);
          materials.forEach((material, index) => {
            console.log(`  ${index + 1}. ID: ${material.id}, Location: ${material.location}, Type: ${material.type}, Quantity: ${material.quantity}, Exported: ${material.exported}`);
          });
        }
      });
      
      // Ki·ªÉm tra s·ªë l∆∞·ª£ng xu·∫•t
      const materialsWithExported = this.inventoryMaterials.filter(m => m.exported && m.exported > 0);
      console.log(`üì¶ Materials with exported quantities: ${materialsWithExported.length}`);
      
      if (materialsWithExported.length > 0) {
        materialsWithExported.forEach(material => {
          console.log(`  üì¶ ${material.materialCode} - PO ${material.poNumber}: Exported = ${material.exported}`);
        });
      } else {
        console.log('‚ö†Ô∏è No materials have exported quantities!');
      }
      
    } catch (error) {
      console.error('‚ùå Error checking consolidation status:', error);
    }
  }

  // G·ªôp d√≤ng ngay l·∫≠p t·ª©c
  forceConsolidateNow(): void {
    try {
      console.log('üöÄ Force consolidating inventory data now...');
      
      const beforeCount = this.inventoryMaterials.length;
      console.log(`üìä Before consolidation: ${beforeCount} items`);
      
      // G·ªôp d√≤ng
      this.consolidateInventoryData();
      
      const afterCount = this.inventoryMaterials.length;
      console.log(`üìä After consolidation: ${afterCount} items`);
      console.log(`‚úÖ Reduced by: ${beforeCount - afterCount} items`);
      
      // C·∫≠p nh·∫≠t display
      this.filteredInventory = [...this.inventoryMaterials];
      this.updateNegativeStockCount();
      
      console.log('‚úÖ Force consolidation completed!');
      
    } catch (error) {
      console.error('‚ùå Error during force consolidation:', error);
    }
  }

  // Test g·ªôp d√≤ng ƒë∆°n gi·∫£n
  simpleConsolidate(): void {
    try {
      console.log('üîß Simple consolidation test...');
      
      if (!this.inventoryMaterials || this.inventoryMaterials.length === 0) {
        console.log('‚ö†Ô∏è No materials to consolidate');
        return;
      }
      
      // T·∫°o map theo Material + PO
      const map = new Map<string, InventoryMaterial>();
      
      this.inventoryMaterials.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        
        if (map.has(key)) {
          // G·ªôp v·ªõi d√≤ng hi·ªán c√≥
          const existing = map.get(key)!;
          existing.quantity += material.quantity;
          existing.exported = (existing.exported || 0) + (material.exported || 0);
          existing.xt = (existing.xt || 0) + (material.xt || 0);
          
          // G·ªôp v·ªã tr√≠ v√† lo·∫°i h√¨nh
          if (material.location && material.location !== existing.location) {
            existing.location = `${existing.location}; ${material.location}`;
          }
          if (material.type && material.type !== existing.type) {
            existing.type = `${existing.type}; ${material.type}`;
          }
          
          console.log(`üîÑ Merged: ${material.materialCode} - PO ${material.poNumber}`);
        } else {
          // D√≤ng m·ªõi
          map.set(key, { ...material });
        }
      });
      
      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
      const beforeCount = this.inventoryMaterials.length;
      this.inventoryMaterials = Array.from(map.values());
      this.filteredInventory = [...this.inventoryMaterials];
      
      console.log(`‚úÖ Simple consolidation: ${beforeCount} ‚Üí ${this.inventoryMaterials.length} items`);
      
    } catch (error) {
      console.error('‚ùå Error in simple consolidation:', error);
    }
  }

  // G·ªôp d√≤ng th·ªß c√¥ng khi c·∫ßn thi·∫øt (kh√¥ng t·ª± ƒë·ªông g·ªôp)
  async manualConsolidateData(): Promise<void> {
    try {
      console.log('üîÑ Manual consolidation started...');
      
      // L∆∞u d·ªØ li·ªáu exported tr∆∞·ªõc khi g·ªôp
      const exportedData = new Map<string, number>();
      this.inventoryMaterials.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        if (material.exported && material.exported > 0) {
          exportedData.set(key, material.exported);
        }
      });
      
      // G·ªôp d√≤ng
      this.consolidateInventoryData();
      
      // Kh√¥i ph·ª•c d·ªØ li·ªáu exported sau khi g·ªôp
      this.inventoryMaterials.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        if (exportedData.has(key)) {
          material.exported = exportedData.get(key)!;
          // C·∫≠p nh·∫≠t Firebase
          this.updateExportedInFirebase(material, material.exported);
        }
      });
      
      console.log('‚úÖ Manual consolidation completed with exported data preserved!');
      
    } catch (error) {
      console.error('‚ùå Error during manual consolidation:', error);
    }
  }

  // Update XT (planned export) quantity
  async updateXT(material: InventoryMaterial): Promise<void> {
    try {
      console.log(`üìù Updating XT quantity for ${material.materialCode} - PO ${material.poNumber}: ${material.xt}`);
      
      // Update in Firebase
      this.updateMaterialInFirebase(material);
      
      // Recalculate stock
      const newStock = this.calculateCurrentStock(material);
      console.log(`üìä New stock calculated: ${newStock} (Opening Stock: ${material.openingStock} + Quantity: ${material.quantity} - Exported: ${material.exported} - XT: ${material.xt})`);
      
      // Update negative stock count for real-time display
      this.updateNegativeStockCount();
      
    } catch (error) {
      console.error(`‚ùå Error updating XT quantity for ${material.materialCode}:`, error);
    }
  }

  // Update opening stock quantity
  async updateOpeningStock(material: InventoryMaterial): Promise<void> {
    try {
      const openingStockDisplay = material.openingStock !== null ? material.openingStock : 'tr·ªëng';
      console.log(`üìù Updating opening stock for ${material.materialCode} - PO ${material.poNumber}: ${openingStockDisplay}`);
      
      // Update in Firebase
      this.updateMaterialInFirebase(material);
      
      // Recalculate stock
      const newStock = this.calculateCurrentStock(material);
      const openingStockValue = material.openingStock !== null ? material.openingStock : 0;
      console.log(`üìä New stock calculated: ${newStock} (Opening Stock: ${openingStockValue} + Quantity: ${material.quantity} - Exported: ${material.exported} - XT: ${material.xt})`);
      
      // Update negative stock count for real-time display
      this.updateNegativeStockCount();
      
    } catch (error) {
      console.error(`‚ùå Error updating opening stock for ${material.materialCode}:`, error);
    }
  }

  // Update exported amount (when unlocked) - Ch·ªâ cho ph√©p user c√≥ quy·ªÅn X√≥a
  updateExportedAmount(material: InventoryMaterial): void {
    console.log(`üîç updateExportedAmount called for: ${material.materialCode} - PO ${material.poNumber}`);
    console.log(`üîç Current material.exported value: ${material.exported}`);
    console.log(`üîç Current material.id: ${material.id}`);
    
    // Ki·ªÉm tra quy·ªÅn v√† tr·∫°ng th√°i m·ªü kh√≥a
    if (!this.canDelete) {
      console.error('‚ùå User does not have delete permission to update exported amount');
      return;
    }
    
    if (!this.isExportColumnUnlocked) {
      console.error('‚ùå Export column is locked. Cannot update exported amount');
      return;
    }
    
    // ƒê·∫£m b·∫£o exported c√≥ gi√° tr·ªã h·ª£p l·ªá
    if (material.exported === null || material.exported === undefined) {
      material.exported = 0;
    }
    
    console.log(`üìù Updating exported amount for ${material.materialCode} - PO ${material.poNumber}: ${material.exported} (by user with delete permission)`);
    
    // Update in Firebase - s·ª≠ d·ª•ng updateMaterialInFirebase nh∆∞ ASM2
    this.updateMaterialInFirebase(material);
    
    // Update negative stock count for real-time display
    this.updateNegativeStockCount();
  }

  // Toggle export column lock/unlock - Ch·ªâ cho ph√©p user c√≥ quy·ªÅn X√≥a
  toggleExportColumnLock(): void {
    // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi cho ph√©p m·ªü kh√≥a
    if (!this.canDelete) {
      console.error('‚ùå User does not have delete permission to unlock export column');
      return;
    }
    
    this.isExportColumnUnlocked = !this.isExportColumnUnlocked;
    console.log(`üîì Export column ${this.isExportColumnUnlocked ? 'unlocked' : 'locked'} by user with delete permission`);
    
    if (this.isExportColumnUnlocked) {
      console.log('‚ö†Ô∏è WARNING: Export column is now editable. Changes will affect stock calculations.');
    } else {
      console.log('üîí Export column is now locked. Changes are disabled.');
    }
  }

  // Check if user can edit export column (has delete permission and column is unlocked)
  canEditExportColumn(): boolean {
    return this.canDelete && this.isExportColumnUnlocked;
  }





  // Auto-update all exported quantities from RM1 outbound (silent, no user interaction)
  private async autoUpdateAllExportedFromOutbound(): Promise<void> {
    try {
      console.log('üîÑ Auto-updating exported quantities from RM1 outbound with FIFO logic...');
      
      // Debug: Ki·ªÉm tra d·ªØ li·ªáu outbound tr∆∞·ªõc
      console.log('üîç Debug: Checking outbound data...');
      const outboundSnapshot = await this.firestore.collection('outbound-materials')
        .ref
        .where('factory', '==', 'ASM1')
        .limit(5)
        .get();
      
      console.log(`üîç Debug: Found ${outboundSnapshot.size} outbound records for ASM1`);
      if (!outboundSnapshot.empty) {
        outboundSnapshot.forEach(doc => {
          const data = doc.data() as any;
          console.log(`üîç Debug: Outbound record - Material: ${data.materialCode}, PO: ${data.poNumber}, Quantity: ${data.exportQuantity || data.exported || data.quantity || 'N/A'}`);
        });
      }
      
      let updatedCount = 0;
      let errorCount = 0;
      
      for (const material of this.inventoryMaterials) {
        try {
          console.log(`üîç Debug: Processing material ${material.materialCode} - PO ${material.poNumber}, current exported: ${material.exported}`);
          await this.updateExportedFromOutboundFIFO(material);
          console.log(`üîç Debug: After update - exported: ${material.exported}`);
          updatedCount++;
        } catch (error) {
          console.error(`‚ùå Error auto-updating ${material.materialCode} - PO ${material.poNumber} - Location ${material.location}:`, error);
          errorCount++;
        }
      }
      
      console.log(`‚úÖ Auto-update completed with FIFO logic: ${updatedCount} materials updated, ${errorCount} errors`);
      
      // Refresh the display
      this.filteredInventory = [...this.inventoryMaterials];
      
      // KH√îNG g·ªôp d√≤ng sau khi c·∫≠p nh·∫≠t exported ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
      // this.consolidateInventoryData();
      
      // S·∫Øp x·∫øp FIFO sau khi c·∫≠p nh·∫≠t
      this.sortInventoryFIFO();
      
    } catch (error) {
      console.error('‚ùå Error during auto-update:', error);
    }
  }

  // Auto-update exported quantities for search results only
  private async autoUpdateSearchResultsExportedFromOutbound(): Promise<void> {
    try {
      console.log('üîÑ Auto-updating exported quantities for search results with FIFO logic...');
      
      let updatedCount = 0;
      let errorCount = 0;
      
      for (const material of this.filteredInventory) {
        try {
          await this.updateExportedFromOutboundFIFO(material);
          updatedCount++;
        } catch (error) {
          console.error(`‚ùå Error auto-updating search result ${material.materialCode} - PO ${material.poNumber} - Location ${material.location}:`, error);
          errorCount++;
        }
      }
      
      console.log(`‚úÖ Search results auto-update completed with FIFO logic: ${updatedCount} materials updated, ${errorCount} errors`);
      
    } catch (error) {
      console.error('‚ùå Error during search results auto-update:', error);
    }
  }

  // Sync all exported quantities from RM1 outbound (manual sync - kept for backward compatibility)
  async syncAllExportedFromOutbound(): Promise<void> {
    try {
      console.log('üîÑ Starting manual sync of all exported quantities from RM1 outbound with FIFO logic...');
      
      let updatedCount = 0;
      let errorCount = 0;
      
      for (const material of this.inventoryMaterials) {
        try {
          await this.updateExportedFromOutboundFIFO(material);
          updatedCount++;
        } catch (error) {
          console.error(`‚ùå Error syncing ${material.materialCode} - PO ${material.poNumber} - Location ${material.location}:`, error);
          errorCount++;
        }
      }
      
      console.log(`‚úÖ Manual sync completed with FIFO logic: ${updatedCount} materials updated, ${errorCount} errors`);
      
      // Refresh the display
      this.filteredInventory = [...this.inventoryMaterials];
      
      // KH√îNG g·ªôp d√≤ng sau khi ƒë·ªìng b·ªô ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu exported
      // this.consolidateInventoryData();
      
      // S·∫Øp x·∫øp FIFO sau khi ƒë·ªìng b·ªô
      this.sortInventoryFIFO();
      
      // Show success message
      if (errorCount === 0) {
        alert(`‚úÖ ƒê·ªìng b·ªô ho√†n t·∫•t!\n\nƒê√£ c·∫≠p nh·∫≠t ${updatedCount} m√£ h√†ng t·ª´ RM1 outbound.`);
      } else {
        alert(`‚ö†Ô∏è ƒê·ªìng b·ªô ho√†n t·∫•t v·ªõi ${errorCount} l·ªói!\n\nƒê√£ c·∫≠p nh·∫≠t ${updatedCount} m√£ h√†ng t·ª´ RM1 outbound.`);
      }
      
    } catch (error) {
      console.error('‚ùå Error during manual sync:', error);
      alert('‚ùå L·ªói khi ƒë·ªìng b·ªô s·ªë l∆∞·ª£ng xu·∫•t t·ª´ RM1 outbound!');
    }
  }

  // Get count of materials with negative stock
  getNegativeStockCount(): number {
    // Always count from inventoryMaterials (not filteredInventory) to get real total
    const count = this.inventoryMaterials.filter(material => {
      const stock = this.calculateCurrentStock(material);
      return stock < 0;
    }).length;
    
    // Emit new value to BehaviorSubject for real-time updates
    this.negativeStockSubject.next(count);
    
    console.log(`üìä Negative stock count calculated: ${count} from total ${this.inventoryMaterials.length} materials`);
    
    return count;
  }

  // Update negative stock count manually (for real-time updates)
  private updateNegativeStockCount(): void {
    const count = this.getNegativeStockCount();
    console.log(`üìä Negative stock count updated: ${count}`);
    
    // Also update total stock count
    this.updateTotalStockCount();
  }
  
  // Update total stock count for real-time display
  private updateTotalStockCount(): void {
    if (!this.filteredInventory || this.filteredInventory.length === 0) {
      this.totalStockSubject.next(0);
      return;
    }
    
    const totalStock = this.filteredInventory.reduce((sum, material) => {
      return sum + this.calculateCurrentStock(material);
    }, 0);
    
    this.totalStockSubject.next(totalStock);
    console.log(`üìä Total stock count updated: ${totalStock}`);
  }





  // Toggle negative stock filter
  toggleNegativeStockFilter(): void {
    console.log('üîÑ Toggling negative stock filter...');
    console.log(`üìä Current showOnlyNegativeStock: ${this.showOnlyNegativeStock}`);
    console.log(`üìä Total materials in inventoryMaterials: ${this.inventoryMaterials.length}`);
    console.log(`üìä Total materials in filteredInventory: ${this.filteredInventory.length}`);
    
    this.showOnlyNegativeStock = !this.showOnlyNegativeStock;
    
    if (this.showOnlyNegativeStock) {
      // Filter to show only negative stock items
      // Use filteredInventory as base if inventoryMaterials is empty
      const baseMaterials = this.inventoryMaterials.length > 0 ? this.inventoryMaterials : this.filteredInventory;
      
      this.filteredInventory = baseMaterials.filter(material => {
        const stock = this.calculateCurrentStock(material);
        const isNegative = stock < 0;
        console.log(`üîç ${material.materialCode} - PO ${material.poNumber}: Stock = ${stock}, Is Negative = ${isNegative}`);
        return isNegative;
      });
      console.log(`üîç Filtered to show only negative stock items: ${this.filteredInventory.length} items`);
    } else {
      // Show all items
      // Use filteredInventory as base if inventoryMaterials is empty
      const baseMaterials = this.inventoryMaterials.length > 0 ? this.inventoryMaterials : this.filteredInventory;
      this.filteredInventory = [...baseMaterials];
      console.log(`üîç Showing all items: ${this.filteredInventory.length} items`);
    }
    
    // Force change detection
    this.cdr.detectChanges();
    
    // Update negative stock count after filtering
    this.updateNegativeStockCount();
    
    console.log(`‚úÖ Filter toggled. showOnlyNegativeStock: ${this.showOnlyNegativeStock}, filteredItems: ${this.filteredInventory.length}`);
  }



  // Format numbers with thousand separators
  formatNumber(value: any): string {
    if (value === null || value === undefined || value === '') {
      return '0';
    }
    
    const num = parseFloat(value);
    if (isNaN(num)) {
      return '0';
    }
    
    if (num % 1 === 0) {
      return num.toLocaleString('vi-VN');
    } else {
      return num.toLocaleString('vi-VN', { 
        minimumFractionDigits: 0, 
        maximumFractionDigits: 2 
      });
    }
  }

  // Get material name from catalog
  getMaterialName(materialCode: string): string {
    if (this.catalogCache.has(materialCode)) {
      return this.catalogCache.get(materialCode)!.materialName;
    }
    return materialCode;
  }

  // Get material unit from catalog
  getMaterialUnit(materialCode: string): string {
    if (this.catalogCache.has(materialCode)) {
      return this.catalogCache.get(materialCode)!.unit;
    }
    return 'PCS';
  }

  // Get standard packing from catalog
  getStandardPacking(materialCode: string): number {
    console.log(`üîç Getting Standard Packing for ${materialCode}`);
    console.log(`üìã Catalog cache size: ${this.catalogCache.size}`);
    console.log(`üìã Catalog loaded: ${this.catalogLoaded}`);
    
    if (this.catalogCache.has(materialCode)) {
      const catalogItem = this.catalogCache.get(materialCode);
      console.log(`‚úÖ Found in catalog:`, catalogItem);
      const result = catalogItem?.standardPacking || 0;
      console.log(`üì¶ Standard Packing result: ${result}`);
      return result;
    } else {
      console.log(`‚ùå Material ${materialCode} NOT found in catalog cache`);
      console.log(`üìã Available catalog keys:`, Array.from(this.catalogCache.keys()));
      return 0;
    }
  }





  // Helper method to check if Rolls/Bags is valid for QR printing
  isRollsOrBagsValid(material: InventoryMaterial): boolean {
    const rollsOrBagsValue = material.rollsOrBags;
    return rollsOrBagsValue && 
           !(typeof rollsOrBagsValue === 'string' && rollsOrBagsValue.trim() === '') &&
           parseFloat(String(rollsOrBagsValue)) > 0;
  }

  // Print QR Code for inventory items
  async printQRCode(material: InventoryMaterial): Promise<void> {
    try {
      console.log('üè∑Ô∏è Generating QR code for ASM1 material:', material.materialCode);
      
      // Ki·ªÉm tra Rolls/Bags tr∆∞·ªõc khi t·∫°o QR
      const rollsOrBagsValue = material.rollsOrBags;
      if (!rollsOrBagsValue || 
          (typeof rollsOrBagsValue === 'string' && rollsOrBagsValue.trim() === '') ||
          parseFloat(String(rollsOrBagsValue)) <= 0) {
        alert('‚ùå Kh√¥ng th·ªÉ in tem QR!\n\nL√Ω do: Thi·∫øu Rolls/Bags\n\nVui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng Rolls/Bags tr∆∞·ªõc khi in tem QR.');
        return;
      }
      
      // Calculate quantity per roll/bag
      const rollsOrBags = parseFloat(material.rollsOrBags) || 1;
      const totalQuantity = this.calculateCurrentStock(material);
      
      if (!totalQuantity || totalQuantity <= 0) {
        alert('‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng tr∆∞·ªõc khi t·∫°o QR code!');
        return;
      }
      
      // Calculate how many full units we can make
      const fullUnits = Math.floor(totalQuantity / rollsOrBags);
      const remainingQuantity = totalQuantity % rollsOrBags;
      
      console.log('üìä QR calculation:', {
        totalQuantity,
        rollsOrBags,
        fullUnits,
        remainingQuantity
      });
      
      // Generate QR codes based on quantity per unit
      // QR code format: M√£ h√†ng|PO|S·ªë ƒë∆°n v·ªã|Ng√†y nh·∫≠p (DD/MM/YYYY)
      // S·ª≠ d·ª•ng importDate n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng ng√†y hi·ªán t·∫°i
      const qrCodes = [];
      
      // Chuy·ªÉn ng√†y th√†nh batch number: 26/08/2025 -> 26082025
      const batchNumber = material.importDate ? 
        material.importDate.toLocaleDateString('en-GB').split('/').join('') : 
        new Date().toLocaleDateString('en-GB').split('/').join('');
      
      // Add full units
      for (let i = 0; i < fullUnits; i++) {
        qrCodes.push({
          materialCode: material.materialCode,
          poNumber: material.poNumber,
          unitNumber: rollsOrBags,
          qrData: `${material.materialCode}|${material.poNumber}|${rollsOrBags}|${batchNumber}`
        });
      }
      
      // Add remaining quantity if any
      if (remainingQuantity > 0) {
        qrCodes.push({
          materialCode: material.materialCode,
          poNumber: material.poNumber,
          unitNumber: remainingQuantity,
          qrData: `${material.materialCode}|${material.poNumber}|${remainingQuantity}|${batchNumber}`
        });
      }

      if (qrCodes.length === 0) {
        alert('‚ùå Vui l√≤ng nh·∫≠p ƒë∆°n v·ªã h·ª£p l·ªá tr∆∞·ªõc khi t·∫°o QR code!');
        return;
      }

      console.log(`üì¶ Generated ${qrCodes.length} QR codes for ASM1`);

      // Generate QR code images
      const qrImages = await Promise.all(
        qrCodes.map(async (qrCode, index) => {
          const qrImage = await QRCode.toDataURL(qrCode.qrData, {
            width: 200,
            margin: 1,
            color: {
              dark: '#000000',
              light: '#FFFFFF'
            }
          });
          
          return {
            image: qrImage,
            materialCode: qrCode.materialCode,
            poNumber: qrCode.poNumber,
            unitNumber: qrCode.unitNumber,
            qrData: qrCode.qrData,
            index: index + 1
          };
        })
      );

      // Create print window
      this.createQRPrintWindow(qrImages, material);
      
    } catch (error) {
      console.error('‚ùå Error generating QR code for ASM1:', error);
      alert('‚ùå L·ªói khi t·∫°o QR code: ' + error.message);
    }
  }

  // Scan QR for location change
  scanLocationQR(material: InventoryMaterial): void {
    console.log('üì∑ Opening QR scanner for location change:', material.materialCode);
    
    const dialogData: QRScannerData = {
      title: 'Qu√©t Barcode V·ªã Tr√≠',
      message: 'Camera s·∫Ω t·ª± ƒë·ªông qu√©t barcode v·ªã tr√≠ m·ªõi',
      materialCode: material.materialCode
    };

    const dialogRef = this.dialog.open(QRScannerModalComponent, {
      width: '500px',
      maxWidth: '95vw',
      data: dialogData,
      disableClose: true, // Prevent accidental close
      panelClass: 'qr-scanner-dialog'
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('üì∑ QR Scanner result:', result);
      
      if (result && result.success && result.location) {
        // Update location
        const oldLocation = material.location;
        material.location = result.location;
        
        console.log(`üìç Location changed: ${oldLocation} ‚Üí ${result.location}`);
        
        // Save to Firebase
        this.updateLocation(material);
        
        // Show success message
        const method = result.manual ? 'nh·∫≠p th·ªß c√¥ng' : 'qu√©t QR';
        alert(`‚úÖ ƒê√£ thay ƒë·ªïi v·ªã tr√≠ th√†nh c√¥ng!\n\nM√£ h√†ng: ${material.materialCode}\nV·ªã tr√≠ c≈©: ${oldLocation}\nV·ªã tr√≠ m·ªõi: ${result.location}\n\nPh∆∞∆°ng th·ª©c: ${method}`);
        
      } else if (result && result.cancelled) {
        console.log('‚ùå QR scan cancelled by user');
      } else {
        console.log('‚ùå QR scan failed or no result');
      }
    });
  }

  // Reset function - Delete items with zero stock
  async resetZeroStock(): Promise<void> {
    try {
      // Find all items with stock = 0
      const zeroStockItems = this.inventoryMaterials.filter(item => 
        item.factory === this.FACTORY && this.calculateCurrentStock(item) === 0
      );

      if (zeroStockItems.length === 0) {
        alert('‚úÖ Kh√¥ng c√≥ m√£ h√†ng n√†o c√≥ t·ªìn kho = 0 trong ASM1');
        return;
      }

      // Show confirmation dialog
      const confirmed = confirm(
        `üîÑ RESET ASM1 INVENTORY\n\n` +
        `T√¨m th·∫•y ${zeroStockItems.length} m√£ h√†ng c√≥ t·ªìn kho = 0\n\n` +
        `B·∫°n c√≥ mu·ªën x√≥a t·∫•t c·∫£ nh·ªØng m√£ h√†ng n√†y kh√¥ng?\n\n` +
        `‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`
      );

      if (!confirmed) {
        return;
      }

      console.log(`üóëÔ∏è Starting reset for ASM1: ${zeroStockItems.length} items to delete`);

      // Delete items in batches
      const batchSize = 50;
      let deletedCount = 0;

      for (let i = 0; i < zeroStockItems.length; i += batchSize) {
        const batch = this.firestore.firestore.batch();
        const currentBatch = zeroStockItems.slice(i, i + batchSize);

        currentBatch.forEach(item => {
          if (item.id) {
            const docRef = this.firestore.collection('inventory-materials').doc(item.id).ref;
            batch.delete(docRef);
          }
        });

        await batch.commit();
        deletedCount += currentBatch.length;

        console.log(`‚úÖ ASM1 Reset batch ${Math.floor(i/batchSize) + 1} completed: ${deletedCount}/${zeroStockItems.length}`);

        // Small delay between batches
        if (i + batchSize < zeroStockItems.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      alert(`‚úÖ Reset ho√†n th√†nh!\nƒê√£ x√≥a ${deletedCount} m√£ h√†ng c√≥ t·ªìn kho = 0 t·ª´ ASM1`);

      // Reload inventory data
      await this.loadInventoryFromFirebase();

    } catch (error) {
      console.error('‚ùå Error during ASM1 reset:', error);
      alert(`‚ùå L·ªói khi reset ASM1: ${error.message}`);
    }
  }

  // Create print window for QR codes - Using Inbound format
  private createQRPrintWindow(qrImages: any[], material: InventoryMaterial): void {
    const printWindow = window.open('', '_blank');
    
    if (!printWindow) {
      alert('‚ùå Kh√¥ng th·ªÉ m·ªü c·ª≠a s·ªï in. Vui l√≤ng cho ph√©p popup!');
      return;
    }

    const currentDate = new Date().toLocaleDateString('vi-VN');
    
    // Use exact same format as Inbound for consistency
    printWindow.document.write(`
      <html>
        <head>
          <title>QR Label - ASM1 - ${material.materialCode}</title>
          <style>
            * {
              margin: 0 !important;
              padding: 0 !important;
              box-sizing: border-box !important;
            }
            
            body { 
              font-family: Arial, sans-serif; 
              margin: 0 !important; 
              padding: 0 !important;
              background: white !important;
              overflow: hidden !important;
              width: 57mm !important;
              height: 32mm !important;
            }
            
            .qr-container { 
              display: flex !important; 
              margin: 0 !important; 
              padding: 0 !important; 
              border: 1px solid #000 !important; 
              width: 57mm !important; 
              height: 32mm !important; 
              page-break-inside: avoid !important;
              background: white !important;
              box-sizing: border-box !important;
            }
            
            .qr-section {
              width: 30mm !important;
              height: 30mm !important;
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              border-right: 1px solid #ccc !important;
              box-sizing: border-box !important;
            }
            
            .qr-image {
              width: 28mm !important;
              height: 28mm !important;
              display: block !important;
            }
            
            .info-section {
              flex: 1 !important;
              padding: 1mm !important;
              display: flex !important;
              flex-direction: column !important;
              justify-content: space-between !important;
              font-size: 8px !important;
              line-height: 1.1 !important;
              box-sizing: border-box !important;
            }
            
            .info-row {
              margin: 0.3mm 0 !important;
              font-weight: bold !important;
            }
            
            .info-row.small {
              font-size: 7px !important;
              color: #666 !important;
            }
            
            .qr-grid {
              text-align: center !important;
              display: flex !important;
              flex-direction: row !important;
              flex-wrap: wrap !important;
              align-items: flex-start !important;
              justify-content: flex-start !important;
              gap: 0 !important;
              padding: 0 !important;
              margin: 0 !important;
              width: 57mm !important;
              height: 32mm !important;
            }
            
            @media print {
              body { 
                margin: 0 !important; 
                padding: 0 !important;
                overflow: hidden !important;
                width: 57mm !important;
                height: 32mm !important;
              }
              
              @page {
                margin: 0 !important;
                size: 57mm 32mm !important;
                padding: 0 !important;
              }
              
              .qr-container { 
                margin: 0 !important; 
                padding: 0 !important;
                width: 57mm !important;
                height: 32mm !important;
                page-break-inside: avoid !important;
                border: 1px solid #000 !important;
              }
              
              .qr-section {
                width: 30mm !important;
                height: 30mm !important;
              }
              
              .qr-image {
                width: 28mm !important;
                height: 28mm !important;
              }
              
              .info-section {
                font-size: 8px !important;
                padding: 1mm !important;
              }
              
              .info-row.small {
                font-size: 7px !important;
              }
              
              .qr-grid {
                gap: 0 !important;
                padding: 0 !important;
                margin: 0 !important;
                width: 57mm !important;
                height: 32mm !important;
              }
            }
          </style>
        </head>
        <body>
          <div class="qr-grid">
            ${qrImages.map(qr => `
              <div class="qr-container">
                <div class="qr-section">
                  <img src="${qr.image}" alt="QR Code" class="qr-image">
                </div>
                <div class="info-section">
                  <div class="info-row">${qr.materialCode}</div>
                  <div class="info-row">${qr.poNumber}</div>
                  <div class="info-row">${qr.unitNumber}</div>
                  <div class="info-row small">ASM1</div>
                  <div class="info-row small">${currentDate}</div>
                </div>
              </div>
            `).join('')}
          </div>
          <script>
            window.onload = function() {
              setTimeout(() => {
                window.print();
              }, 500);
            };
          </script>
        </body>
      </html>
    `);

    printWindow.document.close();
    console.log(`‚úÖ QR labels created for ASM1 with Inbound format - ${qrImages.length} labels`);
  }

  // G·ªôp d√≤ng t·ª± ƒë·ªông khi load to√†n b·ªô inventory
  private async autoConsolidateOnLoad(): Promise<void> {
    try {
      console.log('üîÑ Auto-consolidating duplicate materials on load...');
      
      // S·ª≠ d·ª•ng d·ªØ li·ªáu hi·ªán t·∫°i
      const currentData = this.inventoryMaterials;
      const originalCount = currentData.length;
      const materialPoMap = new Map<string, InventoryMaterial[]>();
      
      currentData.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        if (!materialPoMap.has(key)) {
          materialPoMap.set(key, []);
        }
        materialPoMap.get(key)!.push(material);
      });
      
      const duplicateGroups = Array.from(materialPoMap.values()).filter(group => group.length > 1);
      const totalDuplicates = duplicateGroups.reduce((sum, group) => sum + group.length, 0);
      
      if (duplicateGroups.length === 0) {
        console.log('‚úÖ No duplicates to consolidate');
        return;
      }
      
      console.log(`üìä Found ${duplicateGroups.length} duplicate groups with ${totalDuplicates} total items`);
      
      // Th·ª±c hi·ªán g·ªôp d√≤ng
      const consolidatedMaterials: InventoryMaterial[] = [];
      const materialsToDelete: string[] = [];
      
      // X·ª≠ l√Ω t·ª´ng nh√≥m tr√πng l·∫∑p
      for (const group of duplicateGroups) {
        if (group.length === 1) continue;
        
        const baseMaterial = { ...group[0] };
        
        // G·ªôp quantities
        const totalOpeningStock = group.reduce((sum, m) => {
          const stock = m.openingStock !== null ? m.openingStock : 0;
          return sum + stock;
        }, 0);
        baseMaterial.openingStock = totalOpeningStock > 0 ? totalOpeningStock : null;
        baseMaterial.quantity = group.reduce((sum, m) => sum + m.quantity, 0);
        baseMaterial.stock = group.reduce((sum, m) => sum + (m.stock || 0), 0);
        baseMaterial.exported = group.reduce((sum, m) => sum + (m.exported || 0), 0);
        baseMaterial.xt = group.reduce((sum, m) => sum + (m.xt || 0), 0);
        
        // G·ªôp location field
        const uniqueLocations = [...new Set(group.map(m => m.location).filter(loc => loc))];
        baseMaterial.location = uniqueLocations.join('; ');
        
        // G·ªôp type field
        const uniqueTypes = [...new Set(group.map(m => m.type).filter(type => type))];
        baseMaterial.type = uniqueTypes.join('; ');
        
        // Keep earliest import date and latest expiry date
        baseMaterial.importDate = new Date(Math.min(...group.map(m => m.importDate.getTime())));
        baseMaterial.expiryDate = new Date(Math.max(...group.map(m => m.expiryDate.getTime())));
        
        // Merge other fields
        baseMaterial.notes = group.map(m => m.notes).filter(n => n).join('; ');
        baseMaterial.remarks = group.map(m => m.remarks).filter(r => r).join('; ');
        baseMaterial.supplier = group.map(m => m.supplier).filter(s => s).join('; ');
        baseMaterial.rollsOrBags = group.map(m => m.rollsOrBags).filter(r => r).join('; ');
        
        // Gi·ªØ l·∫°i ID c·ªßa item ƒë·∫ßu ti√™n ƒë·ªÉ update
        if (baseMaterial.id) {
          // Th√™m c√°c item kh√°c v√†o danh s√°ch x√≥a
          for (let i = 1; i < group.length; i++) {
            if (group[i].id) {
              materialsToDelete.push(group[i].id);
            }
          }
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian
        baseMaterial.updatedAt = new Date();
        
        consolidatedMaterials.push(baseMaterial);
        console.log(`‚úÖ Auto-consolidated: ${baseMaterial.materialCode} - PO ${baseMaterial.poNumber}`);
      }
      
      // Th√™m c√°c item kh√¥ng tr√πng l·∫∑p
      materialPoMap.forEach((group, key) => {
        if (group.length === 1) {
          consolidatedMaterials.push(group[0]);
        }
      });
      
      // L∆∞u v√†o Firebase
      console.log(`üíæ Saving auto-consolidated materials to Firebase...`);
      
      // Update c√°c item ƒë√£ g·ªôp
      for (const material of consolidatedMaterials) {
        if (material.id && materialPoMap.get(`${material.materialCode}_${material.poNumber}`)!.length > 1) {
          await this.firestore.collection('inventory-materials').doc(material.id).update({
            openingStock: material.openingStock,
            quantity: material.quantity,
            stock: material.stock,
            exported: material.exported,
            xt: material.xt,
            location: material.location,
            type: material.type,
            importDate: material.importDate,
            expiryDate: material.expiryDate,
            notes: material.notes,
            remarks: material.remarks,
            supplier: material.supplier,
            rollsOrBags: material.rollsOrBags,
            updatedAt: material.updatedAt
          });
          console.log(`‚úÖ Auto-updated: ${material.materialCode} - PO ${material.poNumber}`);
        }
      }
      
      // X√≥a c√°c item tr√πng l·∫∑p
      if (materialsToDelete.length > 0) {
        console.log(`üóëÔ∏è Auto-deleting ${materialsToDelete.length} duplicate items...`);
        
        // X√≥a theo batch
        const batchSize = 500;
        for (let i = 0; i < materialsToDelete.length; i += batchSize) {
          const batch = this.firestore.firestore.batch();
          const currentBatch = materialsToDelete.slice(i, i + batchSize);
          
          currentBatch.forEach(id => {
            const docRef = this.firestore.collection('inventory-materials').doc(id).ref;
            batch.delete(docRef);
          });
          
          await batch.commit();
          console.log(`‚úÖ Auto-deleted batch ${Math.floor(i/batchSize) + 1}: ${currentBatch.length} items`);
        }
      }
      
      // C·∫≠p nh·∫≠t local data
      this.inventoryMaterials = consolidatedMaterials;
      this.filteredInventory = [...this.inventoryMaterials];
      
      const finalCount = this.inventoryMaterials.length;
      const reducedCount = originalCount - finalCount;
      
      console.log(`‚úÖ Auto-consolidation completed: ${originalCount} ‚Üí ${finalCount} items (reduced by ${reducedCount})`);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o cho user
      if (reducedCount > 0) {
        this.consolidationMessage = `‚úÖ ƒê√£ t·ª± ƒë·ªông g·ªôp ${reducedCount} d√≤ng tr√πng l·∫∑p khi load inventory. T·ª´ ${originalCount} ‚Üí ${finalCount} d√≤ng.`;
        this.showConsolidationMessage = true;
        
        // Auto-hide message after 8 seconds
        setTimeout(() => {
          this.showConsolidationMessage = false;
        }, 8000);
      }
      
    } catch (error) {
      console.error('‚ùå Error during auto-consolidation:', error);
      // Kh√¥ng hi·ªÉn th·ªã error cho user v√¨ ƒë√¢y l√† auto-process
    }
  }

  // Ti·∫øp t·ª•c x·ª≠ l√Ω sau khi g·ªôp d√≤ng
  private continueAfterConsolidation(): void {
    // S·∫Øp x·∫øp FIFO: Material Code -> PO (oldest first)
    this.sortInventoryFIFO();
    
    // Mark duplicates for display
    this.markDuplicates();
    
    // T·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t t·ª´ outbound cho t·∫•t c·∫£ materials
    console.log('üîÑ Updating exported quantities from outbound...');
    this.autoUpdateAllExportedFromOutbound();
    
    this.isLoading = false;
    
    console.log(`‚úÖ Loaded ${this.inventoryMaterials.length} ASM1 inventory items`);
  }

  // G·ªôp to√†n b·ªô d√≤ng tr√πng l·∫∑p v√† l∆∞u v√†o Firebase
  async consolidateAllInventory(): Promise<void> {
    try {
      // Hi·ªÉn th·ªã th·ªëng k√™ tr∆∞·ªõc khi g·ªôp
      const originalCount = this.inventoryMaterials.length;
      const materialPoMap = new Map<string, InventoryMaterial[]>();
      
      this.inventoryMaterials.forEach(material => {
        const key = `${material.materialCode}_${material.poNumber}`;
        if (!materialPoMap.has(key)) {
          materialPoMap.set(key, []);
        }
        materialPoMap.get(key)!.push(material);
      });
      
      const duplicateGroups = Array.from(materialPoMap.values()).filter(group => group.length > 1);
      const totalDuplicates = duplicateGroups.reduce((sum, group) => sum + group.length, 0);
      
      if (duplicateGroups.length === 0) {
        alert('‚úÖ Kh√¥ng c√≥ d√≤ng tr√πng l·∫∑p n√†o ƒë·ªÉ g·ªôp!');
        return;
      }
      
      // X√°c ƒë·ªãnh lo·∫°i d·ªØ li·ªáu
      const dataType = this.filteredInventory.length > 0 && this.filteredInventory.length < this.inventoryMaterials.length ? 
        'k·∫øt qu·∫£ search' : 'to√†n b·ªô inventory';
      
      // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
      let details = `üìä TH√îNG TIN G·ªòP D√íNG:\n\n`;
      details += `‚Ä¢ Lo·∫°i d·ªØ li·ªáu: ${dataType}\n`;
      details += `‚Ä¢ T·ªïng d√≤ng hi·ªán t·∫°i: ${originalCount}\n`;
      details += `‚Ä¢ S·ªë nh√≥m tr√πng l·∫∑p: ${duplicateGroups.length}\n`;
      details += `‚Ä¢ T·ªïng d√≤ng s·∫Ω ƒë∆∞·ª£c g·ªôp: ${totalDuplicates - duplicateGroups.length}\n`;
      details += `‚Ä¢ D√≤ng c√≤n l·∫°i sau g·ªôp: ${originalCount - (totalDuplicates - duplicateGroups.length)}\n\n`;
      
      details += `üìã CHI TI·∫æT C√ÅC NH√ìM TR√ôNG L·∫∂P:\n`;
      duplicateGroups.forEach((group, index) => {
        const material = group[0];
        details += `${index + 1}. ${material.materialCode} - PO: ${material.poNumber} (${group.length} d√≤ng)\n`;
      });
      
      // X√°c nh·∫≠n g·ªôp
      const confirmMessage = details + `\n‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω:\n` +
        `‚Ä¢ G·ªôp t·∫•t c·∫£ d√≤ng tr√πng l·∫∑p theo Material+PO trong ${dataType}\n` +
        `‚Ä¢ L∆∞u tr·ª±c ti·∫øp v√†o Firebase\n` +
        `‚Ä¢ KH√îNG TH·ªÇ HO√ÄN T√ÅC\n\n` +
        `B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?`;
      
      if (!confirm(confirmMessage)) {
        console.log('‚ùå User cancelled consolidation');
        return;
      }
      
      // X√°c nh·∫≠n l·∫ßn th·ª© 2
      const finalConfirm = confirm(`üö® X√ÅC NH·∫¨N CU·ªêI C√ôNG:\n\n` +
        `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ªôp ${totalDuplicates - duplicateGroups.length} d√≤ng tr√πng l·∫∑p ` +
        `v√† l∆∞u v√†o Firebase?\n\n` +
        `H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!`);
      
      if (!finalConfirm) {
        console.log('‚ùå User cancelled final confirmation');
        return;
      }
      
      console.log(`üöÄ Starting consolidation of ${duplicateGroups.length} duplicate groups...`);
      
      // Show loading
      this.isLoading = true;
      
      // Th·ª±c hi·ªán g·ªôp d√≤ng
      const consolidatedMaterials: InventoryMaterial[] = [];
      const materialsToDelete: string[] = [];
      
      // X·ª≠ l√Ω t·ª´ng nh√≥m tr√πng l·∫∑p
      for (const group of duplicateGroups) {
        if (group.length === 1) continue; // B·ªè qua nh√≥m ch·ªâ c√≥ 1 item
        
        const baseMaterial = { ...group[0] };
        
        // G·ªôp quantities
        const totalOpeningStock = group.reduce((sum, m) => {
          const stock = m.openingStock !== null ? m.openingStock : 0;
          return sum + stock;
        }, 0);
        baseMaterial.openingStock = totalOpeningStock > 0 ? totalOpeningStock : null;
        baseMaterial.quantity = group.reduce((sum, m) => sum + m.quantity, 0);
        baseMaterial.stock = group.reduce((sum, m) => sum + (m.stock || 0), 0);
        baseMaterial.exported = group.reduce((sum, m) => sum + (m.exported || 0), 0);
        baseMaterial.xt = group.reduce((sum, m) => sum + (m.xt || 0), 0);
        
        // G·ªôp location field
        const uniqueLocations = [...new Set(group.map(m => m.location).filter(loc => loc))];
        baseMaterial.location = uniqueLocations.join('; ');
        
        // G·ªôp type field
        const uniqueTypes = [...new Set(group.map(m => m.type).filter(type => type))];
        baseMaterial.type = uniqueTypes.join('; ');
        
        // Keep earliest import date and latest expiry date
        baseMaterial.importDate = new Date(Math.min(...group.map(m => m.importDate.getTime())));
        baseMaterial.expiryDate = new Date(Math.max(...group.map(m => m.expiryDate.getTime())));
        
        // Merge other fields
        baseMaterial.notes = group.map(m => m.notes).filter(n => n).join('; ');
        baseMaterial.remarks = group.map(m => m.remarks).filter(r => r).join('; ');
        baseMaterial.supplier = group.map(m => m.supplier).filter(s => s).join('; ');
        baseMaterial.rollsOrBags = group.map(m => m.rollsOrBags).filter(r => r).join('; ');
        
        // Gi·ªØ l·∫°i ID c·ªßa item ƒë·∫ßu ti√™n ƒë·ªÉ update
        if (baseMaterial.id) {
          // Th√™m c√°c item kh√°c v√†o danh s√°ch x√≥a
          for (let i = 1; i < group.length; i++) {
            if (group[i].id) {
              materialsToDelete.push(group[i].id);
            }
          }
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian
        baseMaterial.updatedAt = new Date();
        
        consolidatedMaterials.push(baseMaterial);
        console.log(`‚úÖ Consolidated: ${baseMaterial.materialCode} - PO ${baseMaterial.poNumber}`);
      }
      
      // Th√™m c√°c item kh√¥ng tr√πng l·∫∑p
      materialPoMap.forEach((group, key) => {
        if (group.length === 1) {
          consolidatedMaterials.push(group[0]);
        }
      });
      
      // L∆∞u v√†o Firebase
      console.log(`üíæ Saving consolidated materials to Firebase...`);
      
      // Update c√°c item ƒë√£ g·ªôp
      for (const material of consolidatedMaterials) {
        if (material.id && materialPoMap.get(`${material.materialCode}_${material.poNumber}`)!.length > 1) {
          // ƒê√¢y l√† item ƒë√£ g·ªôp, c·∫ßn update
          await this.firestore.collection('inventory-materials').doc(material.id).update({
            openingStock: material.openingStock,
            quantity: material.quantity,
            stock: material.stock,
            exported: material.exported,
            xt: material.xt,
            location: material.location,
            type: material.type,
            importDate: material.importDate,
            expiryDate: material.expiryDate,
            notes: material.notes,
            remarks: material.remarks,
            supplier: material.supplier,
            rollsOrBags: material.rollsOrBags,
            updatedAt: material.updatedAt
          });
          console.log(`‚úÖ Updated: ${material.materialCode} - PO ${material.poNumber}`);
        }
      }
      
      // X√≥a c√°c item tr√πng l·∫∑p
      if (materialsToDelete.length > 0) {
        console.log(`üóëÔ∏è Deleting ${materialsToDelete.length} duplicate items...`);
        
        // X√≥a theo batch (Firestore limit: 500 operations per batch)
        const batchSize = 500;
        for (let i = 0; i < materialsToDelete.length; i += batchSize) {
          const batch = this.firestore.firestore.batch();
          const currentBatch = materialsToDelete.slice(i, i + batchSize);
          
          currentBatch.forEach(id => {
            const docRef = this.firestore.collection('inventory-materials').doc(id).ref;
            batch.delete(docRef);
          });
          
          await batch.commit();
          console.log(`‚úÖ Deleted batch ${Math.floor(i/batchSize) + 1}: ${currentBatch.length} items`);
        }
      }
      
      // C·∫≠p nh·∫≠t local data
      this.inventoryMaterials = consolidatedMaterials;
      this.filteredInventory = [...this.inventoryMaterials];
      
      // Sort v√† mark duplicates
      this.sortInventoryFIFO();
      this.markDuplicates();
      this.updateNegativeStockCount();
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£
      const finalCount = this.inventoryMaterials.length;
      const reducedCount = originalCount - finalCount;
      
      alert(`‚úÖ G·ªòP D√íNG HO√ÄN T·∫§T!\n\n` +
        `üìä K·∫øt qu·∫£:\n` +
        `‚Ä¢ T·ªïng d√≤ng tr∆∞·ªõc: ${originalCount}\n` +
        `‚Ä¢ T·ªïng d√≤ng sau: ${finalCount}\n` +
        `‚Ä¢ ƒê√£ g·ªôp: ${reducedCount} d√≤ng\n` +
        `‚Ä¢ S·ªë nh√≥m x·ª≠ l√Ω: ${duplicateGroups.length}\n\n` +
        `üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Firebase!\n` +
        `‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`);
      
      console.log(`‚úÖ Consolidation completed: ${originalCount} ‚Üí ${finalCount} items`);
      
    } catch (error) {
      console.error('‚ùå Error during consolidation:', error);
      alert(`‚ùå L·ªói khi g·ªôp d√≤ng: ${error.message}\n\nVui l√≤ng th·ª≠ l·∫°i!`);
    } finally {
      this.isLoading = false;
    }
  }

  // Export inventory data to Excel
  exportToExcel(): void {
    if (!this.canExport) {
      alert('B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t d·ªØ li·ªáu');
      return;
    }

    try {
      console.log('üìä Exporting ASM1 inventory data to Excel...');
      
      // Optimize data for smaller file size
      const exportData = this.filteredInventory.map(material => ({
        'Factory': material.factory || 'ASM1',
        'Import Date': material.importDate.toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit'
        }),
        'Batch': material.batchNumber || '',
        'Material': material.materialCode || '',
        'Name': material.materialName || '',
        'PO': material.poNumber || '',
        'Opening Stock': material.openingStock !== null ? material.openingStock : '',
        'Qty': material.quantity || 0,
        'Unit': material.unit || '',
        'Exported': material.exported || 0,
        'XT': material.xt || 0,
        'Stock': (material.openingStock !== null ? material.openingStock : 0) + (material.quantity || 0) - (material.exported || 0) - (material.xt || 0),
        'Location': material.location || '',
        'Type': material.type || '',
        'Expiry': material.expiryDate?.toLocaleDateString('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: '2-digit'
        }) || '',
        'QC': material.qualityCheck ? 'Yes' : 'No',
        'Received': material.isReceived ? 'Yes' : 'No',
        'Completed': material.isCompleted ? 'Yes' : 'No',
        'Supplier': material.supplier || ''
      }));
      
      const worksheet = XLSX.utils.json_to_sheet(exportData);
      
      // Set column widths for better readability
      const colWidths = [
        { wch: 8 },   // Factory
        { wch: 10 },  // Import Date
        { wch: 12 },  // Batch
        { wch: 15 },  // Material
        { wch: 20 },  // Name
        { wch: 12 },  // PO
        { wch: 12 },  // Opening Stock
        { wch: 8 },   // Qty
        { wch: 6 },   // Unit
        { wch: 8 },   // Exported
        { wch: 6 },   // XT
        { wch: 8 },   // Stock
        { wch: 12 },  // Location
        { wch: 8 },   // Type
        { wch: 10 },  // Expiry
        { wch: 6 },   // QC
        { wch: 8 },   // Received
        { wch: 8 },   // Completed
        { wch: 15 }   // Supplier
      ];
      worksheet['!cols'] = colWidths;
      
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, 'ASM1_Inventory');
      
      const fileName = `ASM1_Inventory_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(workbook, fileName);
      
      console.log('‚úÖ ASM1 inventory data exported to Excel');
      alert(`‚úÖ ƒê√£ xu·∫•t ${exportData.length} records ra file Excel`);
      
    } catch (error) {
      console.error('‚ùå Export error:', error);
      alert('L·ªói export: ' + error.message);
    }
  }



  // Ki·ªÉm tra l·ªãch s·ª≠ xu·∫•t c·ªßa material
  checkExportHistory(material: InventoryMaterial): void {
    console.log(`üîç DEBUG: Checking export history for ${material.materialCode} - PO: ${material.poNumber} - Location: ${material.location}`);
    console.log(`üìä Material details:`, {
      id: material.id,
      quantity: material.quantity,
      exported: material.exported,
      xt: material.xt,
      calculatedStock: this.calculateCurrentStock(material),
      location: material.location
    });

    // Ki·ªÉm tra trong collection outbound-materials - CH·ªà L·∫§Y THEO V·ªä TR√ç C·ª§ TH·ªÇ
    this.firestore.collection('outbound-materials', ref => 
      ref.where('materialCode', '==', material.materialCode)
         .where('poNumber', '==', material.poNumber)
         .where('location', '==', material.location) // Th√™m ƒëi·ªÅu ki·ªán v·ªã tr√≠ ƒë·ªÉ tr√°nh nh√¢n ƒë√¥i
         .where('factory', '==', 'ASM1')
         .orderBy('exportDate', 'desc')
         .limit(10)
    ).get().subscribe(snapshot => {
      console.log(`üì¶ Found ${snapshot.docs.length} outbound records for ${material.materialCode} - ${material.poNumber} - Location ${material.location}`);
      
      snapshot.docs.forEach((doc, index) => {
        const data = doc.data() as any;
        console.log(`  ${index + 1}. Export: ${data.exportQuantity} from Location ${data.location} on ${data.exportDate?.toDate?.() || data.exportDate}`);
      });
    });

    // Ki·ªÉm tra trong collection inventory-materials
    this.firestore.collection('inventory-materials', ref => 
      ref.where('materialCode', '==', material.materialCode)
         .where('poNumber', '==', material.poNumber)
         .where('factory', '==', 'ASM1')
    ).get().subscribe(snapshot => {
      console.log(`üìã Found ${snapshot.docs.length} inventory records for ${material.materialCode} - ${material.poNumber}`);
      
      snapshot.docs.forEach((doc, index) => {
        const data = doc.data() as any;
        console.log(`  ${index + 1}. ID: ${doc.id}, Location: ${data.location}, Exported: ${data.exported}, Stock: ${data.stock}, Updated: ${data.updatedAt?.toDate?.() || data.updatedAt}`);
      });
    });
  }


}
