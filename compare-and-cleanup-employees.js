const admin = require('firebase-admin');

// Initialize Firebase Admin SDK
const serviceAccount = require('./serviceAccountKey.json'); // C·∫ßn file service account key

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://your-project-id.firebaseio.com" // Thay b·∫±ng URL th·ª±c t·∫ø
});

const db = admin.firestore();

async function compareAndCleanupEmployees() {
  try {
    console.log('üîç B·∫Øt ƒë·∫ßu so s√°nh v√† d·ªçn d·∫πp m√£ nh√¢n vi√™n...\n');

    // 1. L·∫•y danh s√°ch m√£ nh√¢n vi√™n t·ª´ Settings (local storage ho·∫∑c collection)
    console.log('üìã ƒêang l·∫•y danh s√°ch m√£ nh√¢n vi√™n t·ª´ Settings...');
    
    // L·∫•y t·ª´ collection 'user-permissions' (Settings)
    const settingsSnapshot = await db.collection('user-permissions').get();
    const settingsEmployeeIds = new Set();
    
    settingsSnapshot.forEach(doc => {
      const data = doc.data();
      if (data.employeeId) {
        settingsEmployeeIds.add(data.employeeId);
        console.log(`  ‚úÖ Settings: ${data.employeeId} (${data.email || 'No email'})`);
      }
    });

    console.log(`\nüìä T·ªïng s·ªë m√£ nh√¢n vi√™n trong Settings: ${settingsEmployeeIds.size}\n`);

    // 2. L·∫•y danh s√°ch m√£ nh√¢n vi√™n t·ª´ c√°c collection kh√°c trong Firebase
    console.log('üîç ƒêang t√¨m m√£ nh√¢n vi√™n trong c√°c collection Firebase...');
    
    const firebaseEmployeeIds = new Set();
    const employeeUsage = new Map(); // Track where each employee ID is used

    // Collections to check for employee IDs
    const collectionsToCheck = [
      'inbound-materials',
      'outbound-materials', 
      'materials-asm1',
      'materials-asm2',
      'work-orders',
      'shipment-items',
      'label-schedules',
      'safety-materials',
      'training-reports',
      'audit-logs'
    ];

    for (const collectionName of collectionsToCheck) {
      try {
        console.log(`  üîç Ki·ªÉm tra collection: ${collectionName}...`);
        const snapshot = await db.collection(collectionName).get();
        
        snapshot.forEach(doc => {
          const data = doc.data();
          
          // Check various employee ID fields
          const employeeFields = ['employeeId', 'exportedBy', 'createdBy', 'checkedBy', 'performedBy', 'scannedBy'];
          
          employeeFields.forEach(field => {
            if (data[field]) {
              const empId = data[field].toString().trim();
              if (empId && empId !== 'N/A' && empId !== '') {
                firebaseEmployeeIds.add(empId);
                
                if (!employeeUsage.has(empId)) {
                  employeeUsage.set(empId, []);
                }
                employeeUsage.get(empId).push({
                  collection: collectionName,
                  docId: doc.id,
                  field: field,
                  timestamp: data.createdAt || data.updatedAt || new Date()
                });
              }
            }
          });
        });
        
        console.log(`    ‚úÖ ${collectionName}: ${snapshot.size} documents checked`);
      } catch (error) {
        console.log(`    ‚ö†Ô∏è L·ªói khi ki·ªÉm tra ${collectionName}:`, error.message);
      }
    }

    console.log(`\nüìä T·ªïng s·ªë m√£ nh√¢n vi√™n trong Firebase: ${firebaseEmployeeIds.size}\n`);

    // 3. So s√°nh v√† t√¨m m√£ nh√¢n vi√™n d∆∞ th·ª´a
    console.log('üîç So s√°nh danh s√°ch m√£ nh√¢n vi√™n...\n');
    
    const redundantEmployeeIds = new Set();
    const missingEmployeeIds = new Set();
    
    // T√¨m m√£ nh√¢n vi√™n c√≥ trong Firebase nh∆∞ng kh√¥ng c√≥ trong Settings
    for (const empId of firebaseEmployeeIds) {
      if (!settingsEmployeeIds.has(empId)) {
        redundantEmployeeIds.add(empId);
      }
    }
    
    // T√¨m m√£ nh√¢n vi√™n c√≥ trong Settings nh∆∞ng kh√¥ng c√≥ trong Firebase
    for (const empId of settingsEmployeeIds) {
      if (!firebaseEmployeeIds.has(empId)) {
        missingEmployeeIds.add(empId);
      }
    }

    // 4. Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log('üìã K·∫æT QU·∫¢ SO S√ÅNH:\n');
    
    console.log(`‚úÖ M√£ nh√¢n vi√™n h·ª£p l·ªá (c√≥ trong c·∫£ Settings v√† Firebase): ${settingsEmployeeIds.size - missingEmployeeIds.size}`);
    console.log(`‚ö†Ô∏è M√£ nh√¢n vi√™n thi·∫øu trong Firebase: ${missingEmployeeIds.size}`);
    console.log(`‚ùå M√£ nh√¢n vi√™n d∆∞ th·ª´a trong Firebase: ${redundantEmployeeIds.size}\n`);

    if (redundantEmployeeIds.size > 0) {
      console.log('üóëÔ∏è DANH S√ÅCH M√É NH√ÇN VI√äN D∆Ø TH·ª™A:');
      console.log('=====================================');
      
      for (const empId of redundantEmployeeIds) {
        const usage = employeeUsage.get(empId) || [];
        console.log(`\nüë§ ${empId}:`);
        console.log(`   üìä S·ªë l·∫ßn s·ª≠ d·ª•ng: ${usage.length}`);
        
        if (usage.length > 0) {
          console.log(`   üìç ƒê∆∞·ª£c s·ª≠ d·ª•ng trong:`);
          usage.forEach(use => {
            console.log(`      - ${use.collection}/${use.docId} (field: ${use.field})`);
          });
        }
      }
    }

    if (missingEmployeeIds.size > 0) {
      console.log('\n‚ö†Ô∏è DANH S√ÅCH M√É NH√ÇN VI√äN THI·∫æU TRONG FIREBASE:');
      console.log('===============================================');
      for (const empId of missingEmployeeIds) {
        console.log(`   - ${empId}`);
      }
    }

    // 5. T√πy ch·ªçn x√≥a m√£ nh√¢n vi√™n d∆∞ th·ª´a
    if (redundantEmployeeIds.size > 0) {
      console.log('\nü§î B·∫†N C√ì MU·ªêN X√ìA C√ÅC M√É NH√ÇN VI√äN D∆Ø TH·ª™A KH√îNG?');
      console.log('‚ö†Ô∏è L∆ØU √ù: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a vƒ©nh vi·ªÖn v√† kh√¥ng th·ªÉ ho√†n t√°c!');
      console.log('\nƒê·ªÉ x√≥a, h√£y ch·∫°y l·ªánh:');
      console.log('node compare-and-cleanup-employees.js --cleanup');
    }

    // 6. N·∫øu c√≥ flag --cleanup, th·ª±c hi·ªán x√≥a
    if (process.argv.includes('--cleanup')) {
      console.log('\nüóëÔ∏è B·∫ÆT ƒê·∫¶U X√ìA M√É NH√ÇN VI√äN D∆Ø TH·ª™A...\n');
      
      let deletedCount = 0;
      let errorCount = 0;
      
      for (const empId of redundantEmployeeIds) {
        try {
          console.log(`üîÑ ƒêang x√≥a m√£ nh√¢n vi√™n: ${empId}...`);
          
          // X√≥a t·ª´ t·∫•t c·∫£ collections
          for (const collectionName of collectionsToCheck) {
            try {
              const snapshot = await db.collection(collectionName).get();
              const batch = db.batch();
              let batchCount = 0;
              
              snapshot.forEach(doc => {
                const data = doc.data();
                const employeeFields = ['employeeId', 'exportedBy', 'createdBy', 'checkedBy', 'performedBy', 'scannedBy'];
                
                let hasEmployeeId = false;
                employeeFields.forEach(field => {
                  if (data[field] === empId) {
                    hasEmployeeId = true;
                  }
                });
                
                if (hasEmployeeId) {
                  // Update document to remove employee ID
                  const updateData = {};
                  employeeFields.forEach(field => {
                    if (data[field] === empId) {
                      updateData[field] = 'DELETED_EMPLOYEE';
                    }
                  });
                  
                  batch.update(doc.ref, updateData);
                  batchCount++;
                }
              });
              
              if (batchCount > 0) {
                await batch.commit();
                console.log(`  ‚úÖ ${collectionName}: C·∫≠p nh·∫≠t ${batchCount} documents`);
              }
            } catch (error) {
              console.log(`  ‚ö†Ô∏è L·ªói khi x√≥a t·ª´ ${collectionName}:`, error.message);
            }
          }
          
          deletedCount++;
          console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng: ${empId}\n`);
          
        } catch (error) {
          errorCount++;
          console.log(`‚ùå L·ªói khi x√≥a ${empId}:`, error.message);
        }
      }
      
      console.log(`\nüìä K·∫æT QU·∫¢ X√ìA:`);
      console.log(`‚úÖ Th√†nh c√¥ng: ${deletedCount}`);
      console.log(`‚ùå L·ªói: ${errorCount}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh so s√°nh:', error);
  } finally {
    process.exit(0);
  }
}

// Ch·∫°y script
compareAndCleanupEmployees();
